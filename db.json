{"meta":{"version":1,"warehouse":"5.0.1"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-landscape/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/js/jquery-3.6.4.min.js","path":"js/jquery-3.6.4.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.css","path":"fancybox/jquery.fancybox.min.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.js","path":"fancybox/jquery.fancybox.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-nexmoe/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-nexmoe/source/js/copy-codeblock.js","path":"js/copy-codeblock.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-nexmoe/source/js/app.js","path":"js/app.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-nexmoe/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-nexmoe/source/lib/lax.min.js","path":"lib/lax.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-nexmoe/source/preset/plain.styl","path":"preset/plain.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-nexmoe/source/lib/fancybox/fancybox.css","path":"lib/fancybox/fancybox.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-nexmoe/source/lib/iconfont/demo.css","path":"lib/iconfont/demo.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-nexmoe/source/lib/iconfont/demo_index.html","path":"lib/iconfont/demo_index.html","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-nexmoe/source/lib/fancybox/fancybox.umd.js","path":"lib/fancybox/fancybox.umd.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-nexmoe/source/lib/iconfont/iconfont.eot","path":"lib/iconfont/iconfont.eot","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-nexmoe/source/lib/iconfont/iconfont.css","path":"lib/iconfont/iconfont.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-nexmoe/source/lib/iconfont/iconfont.svg","path":"lib/iconfont/iconfont.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-nexmoe/source/lib/iconfont/iconfont.json","path":"lib/iconfont/iconfont.json","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-nexmoe/source/lib/iconfont/iconfont.woff","path":"lib/iconfont/iconfont.woff","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-nexmoe/source/lib/iconfont/iconfont.ttf","path":"lib/iconfont/iconfont.ttf","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-nexmoe/source/lib/mdui_043tiny/mdui.css","path":"lib/mdui_043tiny/mdui.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-nexmoe/source/lib/mdui_043tiny/mdui.js","path":"lib/mdui_043tiny/mdui.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-nexmoe/source/lib/iconfont/iconfont.woff2","path":"lib/iconfont/iconfont.woff2","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-nexmoe/source/lib/iconfont/iconfont.js","path":"lib/iconfont/iconfont.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-kira/source/css/archive.styl","path":"css/archive.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-kira/source/css/article.styl","path":"css/article.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-kira/source/css/color.styl","path":"css/color.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-kira/source/css/content.styl","path":"css/content.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-kira/source/css/kira-code-copy.styl","path":"css/kira-code-copy.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-kira/source/css/kira-friends.styl","path":"css/kira-friends.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-kira/source/css/layout.styl","path":"css/layout.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-kira/source/css/media.styl","path":"css/media.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-kira/source/css/kira-image.styl","path":"css/kira-image.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-kira/source/css/post.styl","path":"css/post.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-kira/source/css/right-column.styl","path":"css/right-column.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-kira/source/css/constants.styl","path":"css/constants.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-kira/source/css/sidebar.styl","path":"css/sidebar.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-kira/source/js/kira-image.js","path":"js/kira-image.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-kira/source/lib/lazysizes.js","path":"lib/lazysizes.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-kira/source/lib/smooth-scrolling.js","path":"lib/smooth-scrolling.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-kira/source/js/kira-code-copy.js","path":"js/kira-code-copy.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-kira/source/deps/css/APlayer.min.css","path":"deps/css/APlayer.min.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-kira/source/deps/js/APlayer.min.js","path":"deps/js/APlayer.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-kira/source/deps/js/Meting.min.js","path":"deps/js/Meting.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-kira/source/lib/highlight/highlight.min.js","path":"lib/highlight/highlight.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-kira/source/lib/mdui/mdui.min.css","path":"lib/mdui/mdui.min.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-kira/source/lib/highlight/atom-one-dark.min.css","path":"lib/highlight/atom-one-dark.min.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-kira/source/lib/mdui/mdui.min.js","path":"lib/mdui/mdui.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-kira/source/lib/iconfont/demo_index.html","path":"lib/iconfont/demo_index.html","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-kira/source/lib/iconfont/demo.css","path":"lib/iconfont/demo.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-kira/source/lib/iconfont/iconfont.js","path":"lib/iconfont/iconfont.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-kira/source/lib/iconfont/iconfont.css","path":"lib/iconfont/iconfont.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-kira/source/lib/iconfont/iconfont.json","path":"lib/iconfont/iconfont.json","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-kira/source/lib/iconfont/iconfont.ttf","path":"lib/iconfont/iconfont.ttf","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-kira/source/lib/iconfont/iconfont.woff","path":"lib/iconfont/iconfont.woff","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-kira/source/lib/iconfont/iconfont.woff2","path":"lib/iconfont/iconfont.woff2","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-kira/source/lib/fonts/roboto/Roboto-Bold.woff2","path":"lib/fonts/roboto/Roboto-Bold.woff2","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-kira/source/lib/fonts/roboto/Roboto-Medium.woff2","path":"lib/fonts/roboto/Roboto-Medium.woff2","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-kira/source/lib/fonts/roboto/Roboto-Regular.woff2","path":"lib/fonts/roboto/Roboto-Regular.woff2","modified":0,"renderable":1},{"_id":"source/pic/101573594_p0.png","path":"pic/101573594_p0.png","modified":0,"renderable":0},{"_id":"source/pic/125981673_p0.png","path":"pic/125981673_p0.png","modified":0,"renderable":0},{"_id":"source/pic/125349440_p0.png","path":"pic/125349440_p0.png","modified":0,"renderable":0}],"Cache":[{"_id":"source/_posts/hello-world.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":1756308328891},{"_id":"source/_posts/test.md","hash":"cec3046d08cb8e4808b35eb206c34588e86fc916","modified":1756309250494},{"_id":"node_modules/hexo-theme-landscape/README.md","hash":"6497b70356271fd6f9f1dc862353be844c457a53","modified":1756308969812},{"_id":"node_modules/hexo-theme-landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1756308962456},{"_id":"node_modules/hexo-theme-landscape/_config.yml","hash":"a93d7b3990e45bc7247eecf01888f71674887a63","modified":1756308970880},{"_id":"node_modules/hexo-theme-landscape/languages/de-DE.yml","hash":"d29d1c4256b7ed9df42f511c2ff0a23ad5fd6c1f","modified":1756308970950},{"_id":"node_modules/hexo-theme-landscape/package.json","hash":"06889bee30e4c39479467021da434d3a6a0990fc","modified":1756308969715},{"_id":"node_modules/hexo-theme-landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1756308970978},{"_id":"node_modules/hexo-theme-landscape/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1756308971043},{"_id":"node_modules/hexo-theme-landscape/languages/en-US.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1756308971122},{"_id":"node_modules/hexo-theme-landscape/languages/es-ES.yml","hash":"7008a8fc91f18d2a735864817b8ebda30c7a2c66","modified":1756308971238},{"_id":"node_modules/hexo-theme-landscape/languages/en.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1756308971180},{"_id":"node_modules/hexo-theme-landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1756308971266},{"_id":"node_modules/hexo-theme-landscape/languages/en-GB.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1756308971079},{"_id":"node_modules/hexo-theme-landscape/languages/fr-FR.yml","hash":"8d09dbdab00a30a2870b56f7c0a7ca7deafa7b88","modified":1756308971336},{"_id":"node_modules/hexo-theme-landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1756308971386},{"_id":"node_modules/hexo-theme-landscape/languages/hu.yml","hash":"284d557130bf54a74e7dcef9d42096130e4d9550","modified":1756308971595},{"_id":"node_modules/hexo-theme-landscape/languages/hu-HU.yml","hash":"712d18664898fa21ba38d4973e90ef41a324ea25","modified":1756308971558},{"_id":"node_modules/hexo-theme-landscape/languages/it-IT.yml","hash":"2cb6dc2fab9bd2dbe1c8bb869a9e8bf85a564fdd","modified":1756308971633},{"_id":"node_modules/hexo-theme-landscape/languages/it.yml","hash":"89b7d91306b2c1a0f3ac023b657bf974f798a1e8","modified":1756308971666},{"_id":"node_modules/hexo-theme-landscape/languages/ja-JP.yml","hash":"08481267e0c112e1f6855620f2837ec4c4a98bbd","modified":1756308971690},{"_id":"node_modules/hexo-theme-landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1756308971738},{"_id":"node_modules/hexo-theme-landscape/languages/mn-MN.yml","hash":"b9e5f3e7c0c2f779cf2cfded6db847b5941637ca","modified":1756308971924},{"_id":"node_modules/hexo-theme-landscape/languages/ko-KR.yml","hash":"19209ad8f9d4057e8df808937f950eb265e1db69","modified":1756308971830},{"_id":"node_modules/hexo-theme-landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1756308972022},{"_id":"node_modules/hexo-theme-landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1756308972068},{"_id":"node_modules/hexo-theme-landscape/languages/mn.yml","hash":"2e7523951072a9403ead3840ad823edd1084c116","modified":1756308971960},{"_id":"node_modules/hexo-theme-landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1756308971880},{"_id":"node_modules/hexo-theme-landscape/languages/pt-PT.yml","hash":"0f852b6b228e6ea59aa3540574bb89b233f2a098","modified":1756308972114},{"_id":"node_modules/hexo-theme-landscape/languages/ru-RU.yml","hash":"360d11a28bb768afb1dd15f63fa7fd3a8cc547ee","modified":1756308972205},{"_id":"node_modules/hexo-theme-landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1756308972164},{"_id":"node_modules/hexo-theme-landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1756308972256},{"_id":"node_modules/hexo-theme-landscape/languages/nl-NL.yml","hash":"5ebbc30021f05d99938f96dfff280392df7f91f0","modified":1756308971996},{"_id":"node_modules/hexo-theme-landscape/languages/th.yml","hash":"84a55b00aa01f03982be294e43c33a20e6d32862","modified":1756308972337},{"_id":"node_modules/hexo-theme-landscape/languages/th-TH.yml","hash":"ebfdba9bc4842c829473c1e6e4544344f182724d","modified":1756308972289},{"_id":"node_modules/hexo-theme-landscape/languages/tr.yml","hash":"a1cdbfa17682d7a971de8ab8588bf57c74224b5b","modified":1756308972362},{"_id":"node_modules/hexo-theme-landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1756308972420},{"_id":"node_modules/hexo-theme-landscape/layout/archive.ejs","hash":"97160b8111dd0283f8231408bcab4c87d31c1646","modified":1756308965410},{"_id":"node_modules/hexo-theme-landscape/layout/category.ejs","hash":"97160b8111dd0283f8231408bcab4c87d31c1646","modified":1756308966294},{"_id":"node_modules/hexo-theme-landscape/layout/index.ejs","hash":"57281fc3812c877ec2d8e89ec87ede57b9789d4c","modified":1756308967480},{"_id":"node_modules/hexo-theme-landscape/languages/zh-CN.yml","hash":"1efd95774f401c80193eac6ee3f1794bfe93dc5a","modified":1756308972401},{"_id":"node_modules/hexo-theme-landscape/layout/layout.ejs","hash":"0d1765036e4874500e68256fedb7470e96eeb6ee","modified":1756308967556},{"_id":"node_modules/hexo-theme-landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1756308967858},{"_id":"node_modules/hexo-theme-landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1756308967920},{"_id":"node_modules/hexo-theme-landscape/layout/tag.ejs","hash":"97160b8111dd0283f8231408bcab4c87d31c1646","modified":1756308968352},{"_id":"node_modules/hexo-theme-landscape/scripts/fancybox.js","hash":"c857d7a5e4a5d71c743a009c5932bf84229db428","modified":1756308968999},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/after-footer.ejs","hash":"1b89d0caba03a66a43d9c290a5e94fa438a89210","modified":1756308963784},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/article.ejs","hash":"e9d4678e14be5e3cd5e34d783e5af6d6626092f5","modified":1756308965623},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1756308964163},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/footer.ejs","hash":"3656eb692254346671abc03cb3ba1459829e0dce","modified":1756308966739},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/archive.ejs","hash":"0039146b8ccbdf9b9f8bee58fc6c238f0e9921fc","modified":1756308964516},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/google-analytics.ejs","hash":"2ea7442ea1e1a8ab4e41e26c563f58413b59a3d0","modified":1756308967141},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/head.ejs","hash":"0e94f5722d4c44d3cc91be2f4fd30b9ab503b868","modified":1756308967270},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/gauges-analytics.ejs","hash":"21a1e2a3907d1a3dad1cd0ab855fe6735f233c74","modified":1756308967032},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/header.ejs","hash":"6a5033d189554c9a6d42e2ef7952ae5c9742648e","modified":1756308967385},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1756308968030},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1756308966068},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/recent_posts.ejs","hash":"60c4b012dcc656438ff59997e60367e5a21ab746","modified":1756308967976},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1756308968423},{"_id":"node_modules/hexo-theme-landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1756308969894},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1756308968227},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1756308964980},{"_id":"node_modules/hexo-theme-landscape/source/css/_variables.styl","hash":"ca28281423ae57d76b6c1eb91cd845fd4e518bd6","modified":1756308969958},{"_id":"node_modules/hexo-theme-landscape/source/css/style.styl","hash":"e55a1d92954ed20f6887f92dc727bb995a010a43","modified":1756308970798},{"_id":"node_modules/hexo-theme-landscape/source/js/script.js","hash":"49773efcb2221bbdf2d86f3f5c5ff2d841b528cc","modified":1756308969666},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1756308963120},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1756308967634},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1756308965892},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/date.ejs","hash":"f1458584b679545830b75bef2526e2f3eb931045","modified":1756308966422},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1756308967727},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1756308966862},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/title.ejs","hash":"4d7e62574ddf46de9b41605fe3140d77b5ddb26d","modified":1756308968484},{"_id":"node_modules/hexo-theme-landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1756308970534},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1756308970052},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/article.styl","hash":"f608400a08cf137ab15ec1f44bac551950afe879","modified":1756308970136},{"_id":"node_modules/hexo-theme-landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1756308970391},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1756308970228},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1756308968153},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1756308970284},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/highlight.styl","hash":"9cc3b2927d814f2f6e8e188f9d3657b94f4c6ef3","modified":1756308970478},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/header.styl","hash":"268d2989acb06e2ddd06cc36a6918c6cd865476b","modified":1756308970438},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1756308970692},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1756308970583},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1756308970630},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1756308970752},{"_id":"node_modules/hexo-theme-landscape/source/js/jquery-3.6.4.min.js","hash":"eda46747c71d38a880bee44f9a439c3858bb8f99","modified":1756308969360},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1756308969527},{"_id":"node_modules/hexo-theme-landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1756308968888},{"_id":"public/2025/08/27/hello-world/index.html","hash":"1ba974760832be63bd119a7727d87000c9183b90","modified":1756309251568},{"_id":"public/archives/index.html","hash":"5715cf1f73b16b3b3b3932a8f1769cfc3ce9ff7a","modified":1756309251568},{"_id":"public/archives/2025/index.html","hash":"9b738a5deb69b9eb42a3f80abe71dd39d78fd186","modified":1756309251568},{"_id":"public/2025/08/27/test/index.html","hash":"95d69ee85b4e11a386218ed4fe5753879839f23d","modified":1756309251568},{"_id":"public/index.html","hash":"c0bc266c6460bcbe7ca04b31c423037dea5558f8","modified":1756309251568},{"_id":"public/archives/2025/08/index.html","hash":"86a631291b8b557206f85a610582912f60abd216","modified":1756309251568},{"_id":"public/fancybox/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1756309251568},{"_id":"public/css/style.css","hash":"ecc329be740a220cc188ff49b02da4847cb7ee5e","modified":1756309251568},{"_id":"public/fancybox/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1756309251568},{"_id":"public/js/jquery-3.6.4.min.js","hash":"eda46747c71d38a880bee44f9a439c3858bb8f99","modified":1756309251568},{"_id":"public/js/script.js","hash":"49773efcb2221bbdf2d86f3f5c5ff2d841b528cc","modified":1756309251568},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1756309251568},{"_id":"node_modules/hexo-theme-nexmoe/.eslintignore","hash":"1d606028dff10b1a8c635142235182379dc3c64e","modified":1756384386168},{"_id":"node_modules/hexo-theme-nexmoe/.eslintrc.json","hash":"ca45d8e5d80ad6b7004cddacae7fc7d8040b2d6f","modified":1756384397643},{"_id":"node_modules/hexo-theme-nexmoe/LICENSE","hash":"b314c7ebb7d599944981908b7f3ed33a30e78f3a","modified":1756384386502},{"_id":"node_modules/hexo-theme-nexmoe/index.js","hash":"f3d92ae5f32a9aee66f8b24083a2004d69a2b761","modified":1756384396414},{"_id":"node_modules/hexo-theme-nexmoe/README.md","hash":"7e77fc64595bc4afe6a56ebe0fe525a874b4f017","modified":1756384400525},{"_id":"node_modules/hexo-theme-nexmoe/renovate.json","hash":"767b077c7b615e20af3cf865813cd64674a9bea6","modified":1756384398294},{"_id":"node_modules/hexo-theme-nexmoe/package.json","hash":"5f5c79d7fdaa58fa87142085f1f010762afdd643","modified":1756384398211},{"_id":"node_modules/hexo-theme-nexmoe/.github/release-drafter.yml","hash":"9be21d7a486404050224d61415226e1ba321f169","modified":1756384403520},{"_id":"node_modules/hexo-theme-nexmoe/demo/package.json","hash":"883603a5be41686e89c26519e5bfe097343edcc6","modified":1756384398134},{"_id":"node_modules/hexo-theme-nexmoe/crowdin.yml","hash":"f9f02a9cab975c7de721c5dc4179b77870019cc6","modified":1756384402740},{"_id":"node_modules/hexo-theme-nexmoe/include/README.md","hash":"912c1a78db7138e3ff6e1ce622dd00e3bfb1afab","modified":1756384400466},{"_id":"node_modules/hexo-theme-nexmoe/demo/_config.yml","hash":"f5a551599d83995e0dbc4719e7950fa889b3dc64","modified":1756384402643},{"_id":"node_modules/hexo-theme-nexmoe/demo/_config.nexmoe.yml","hash":"8f508665b4512954103e04e1e86f9ebfe30e7748","modified":1756384402544},{"_id":"node_modules/hexo-theme-nexmoe/include/dependency.js","hash":"ed975738b982c19565bc2869a51277723fd23e6b","modified":1756384395412},{"_id":"node_modules/hexo-theme-nexmoe/languages/en.yml","hash":"1a2ab324edb076988fa7a098d2b011d80738a047","modified":1756384403026},{"_id":"node_modules/hexo-theme-nexmoe/include/config.js","hash":"f26ff9408ca6ce956ef40ac6c6996da36c9df67d","modified":1756384394844},{"_id":"node_modules/hexo-theme-nexmoe/languages/default.yml","hash":"c76f93c3c0ac4582694e330647f2fe424930ec3a","modified":1756384402864},{"_id":"node_modules/hexo-theme-nexmoe/languages/it.yml","hash":"334afb6a7967d71ebd2fb32bdd1f8b20174c82bd","modified":1756384403229},{"_id":"node_modules/hexo-theme-nexmoe/languages/ja.yml","hash":"773c3b0464771c6d5149a2175bb9d7eaceb755ea","modified":1756384403278},{"_id":"node_modules/hexo-theme-nexmoe/include/register.js","hash":"446119e7fbc44da8d0fc8c3628c14fadb225c558","modified":1756384397487},{"_id":"node_modules/hexo-theme-nexmoe/languages/zh-CN.yml","hash":"b30de168c5bc226cdb9dbd7358b7b0d33a34e1d5","modified":1756384403685},{"_id":"node_modules/hexo-theme-nexmoe/languages/zh.yml","hash":"81aa48d1ada886cb10f5a195c3afb250f962f3ac","modified":1756384403986},{"_id":"node_modules/hexo-theme-nexmoe/languages/zh-HK.yml","hash":"6b6ada7b425c137cd51edc2f4890b96a21482558","modified":1756384403824},{"_id":"node_modules/hexo-theme-nexmoe/layout/archives.ejs","hash":"2395fdfee67880c1c6b4796882c6fda67930f1f7","modified":1756384390773},{"_id":"node_modules/hexo-theme-nexmoe/layout/index.jsx","hash":"20373ddf76f6d59dde51833e754c9f70cc804f77","modified":1756384399169},{"_id":"node_modules/hexo-theme-nexmoe/languages/zh-TW.yml","hash":"e4ababddda52aa89f0fd51909c2211bcd10abb53","modified":1756384403943},{"_id":"node_modules/hexo-theme-nexmoe/layout/layout.jsx","hash":"e347c8e933b3e496add81502c1a2e229b0042f73","modified":1756384399267},{"_id":"node_modules/hexo-theme-nexmoe/layout/post.ejs","hash":"a22ebd3ceec83722a0c2b1a5bc11688818ae25a7","modified":1756384392766},{"_id":"node_modules/hexo-theme-nexmoe/source/_config.yml","hash":"c09a5a5a10889ef15cbfad988474527ccad19546","modified":1756384402689},{"_id":"node_modules/hexo-theme-nexmoe/layout/py.jsx","hash":"590216a1f66a2085d98544fe082c503ec3baa02e","modified":1756384399448},{"_id":"node_modules/hexo-theme-nexmoe/.github/ISSUE_TEMPLATE/bug_report_en.md","hash":"557484415c610222b16b58df470c2a768782c4fc","modified":1756384399855},{"_id":"node_modules/hexo-theme-nexmoe/scripts/index.js","hash":"c00aba78d38330728dbbdbb0bae57f1b00a7de5e","modified":1756384396549},{"_id":"node_modules/hexo-theme-nexmoe/.github/ISSUE_TEMPLATE/bug_report_zh.md","hash":"d6c77dbb2a3d638d748280fb37dd29375aebe98c","modified":1756384399894},{"_id":"node_modules/hexo-theme-nexmoe/.github/workflows/npm-publish.yml","hash":"b57ce794238f61bb8223752e516970cd1b7732c9","modified":1756384403433},{"_id":"node_modules/hexo-theme-nexmoe/.github/workflows/release-drafter.yml","hash":"ccbe1e1ae6ee3b2a7d32362791aa006afa95e94d","modified":1756384403614},{"_id":"node_modules/hexo-theme-nexmoe/.github/ISSUE_TEMPLATE/feature_request_zh.md","hash":"843abf5e1d7b06cb1feddd75f7025150d46a91c2","modified":1756384400184},{"_id":"node_modules/hexo-theme-nexmoe/.github/ISSUE_TEMPLATE/feature_request_en.md","hash":"803f6736473a122ed78867e64681defcd2edd954","modified":1756384400111},{"_id":"node_modules/hexo-theme-nexmoe/demo/.github/dependabot.yml","hash":"25b0257a0db2c5b6a5756d8990bc2cba12f54fc5","modified":1756384402955},{"_id":"node_modules/hexo-theme-nexmoe/demo/scaffolds/draft.md","hash":"204ab550ddffa92051ea0eb2484a78d84dac3693","modified":1756384400043},{"_id":"node_modules/hexo-theme-nexmoe/include/util/console.js","hash":"59cf9d277d3ac85a496689bd811b1c316001641d","modified":1756384394949},{"_id":"node_modules/hexo-theme-nexmoe/layout/_index/list.ejs","hash":"e98a95f50d6f9042302ec4fad62ac85c5336ba26","modified":1756384392467},{"_id":"node_modules/hexo-theme-nexmoe/demo/scaffolds/page.md","hash":"f0af1cb10f27d859caa51c8e3704469d9ed842a6","modified":1756384400339},{"_id":"node_modules/hexo-theme-nexmoe/demo/scaffolds/post.md","hash":"e7169dab8ce62d41e3734e30706fa786cc7d46f4","modified":1756384400421},{"_id":"node_modules/hexo-theme-nexmoe/layout/_widget/archive.ejs","hash":"2c8c5ee017bfdd56cbb80c7796ef9393aea16d52","modified":1756384390432},{"_id":"node_modules/hexo-theme-nexmoe/layout/_widget/category.ejs","hash":"99113b9f2cb4ffefdda3e3a343647ac6a5083091","modified":1756384391082},{"_id":"node_modules/hexo-theme-nexmoe/layout/_widget/search.ejs","hash":"9771d5e03623a8892c23dab9b24360edbaf87233","modified":1756384393153},{"_id":"node_modules/hexo-theme-nexmoe/layout/_widget/recent_posts.ejs","hash":"7d9eaf8228eda803aa4956e55432f78e056d6a01","modified":1756384392867},{"_id":"node_modules/hexo-theme-nexmoe/layout/_widget/social.ejs","hash":"133927c64cbe6f9cf6601e32be0b03ed576dfbf5","modified":1756384393304},{"_id":"node_modules/hexo-theme-nexmoe/layout/_widget/hitokoto.ejs","hash":"2c9c3567d2b5a99cdbca90673c638409529881db","modified":1756384392105},{"_id":"node_modules/hexo-theme-nexmoe/layout/_widget/tag.ejs","hash":"ddf844f08124454bea2a30f8349b63f3cb63ac16","modified":1756384393543},{"_id":"node_modules/hexo-theme-nexmoe/layout/_widget/tagcloud.ejs","hash":"25e1af5116bd5cbf6c1d1e259a8564e21a3a28d5","modified":1756384393676},{"_id":"node_modules/hexo-theme-nexmoe/layout/_partial/head.ejs","hash":"c14cec07f778dbf643e51671e47c2e6e711045b8","modified":1756384391741},{"_id":"node_modules/hexo-theme-nexmoe/layout/_partial/background.jsx","hash":"05ee70bc00ddac592469a9e56cfdb9f683f130ef","modified":1756384398423},{"_id":"node_modules/hexo-theme-nexmoe/layout/_partial/paginator.jsx","hash":"9b1f26c6f899b1c66c65d7213137f02796b56236","modified":1756384399302},{"_id":"node_modules/hexo-theme-nexmoe/layout/_partial/right.ejs","hash":"e4db789fcf7f7dfe58e22c78ae30a5db2355cc47","modified":1756384393023},{"_id":"node_modules/hexo-theme-nexmoe/layout/_widget/link.ejs","hash":"61bc7a6018309f5b3525b451ccdd62e6664f7e74","modified":1756384392269},{"_id":"node_modules/hexo-theme-nexmoe/scripts/helper/image_filter.js","hash":"284c3f15eaba3ff6db42fe12f921fada5c6f24b4","modified":1756384396344},{"_id":"node_modules/hexo-theme-nexmoe/source/css/style.styl","hash":"2021dacedfe0f6f2ed6fdf6a9e9c067fe792cde0","modified":1756384402058},{"_id":"node_modules/hexo-theme-nexmoe/scripts/helper/css_auto_version.js","hash":"354700a113aca785c82bd59a16901a2dff2a2580","modified":1756384395233},{"_id":"node_modules/hexo-theme-nexmoe/layout/_partial/searchbox.jsx","hash":"83714b79399e0bef913bef8c4dbef58e9dd875f2","modified":1756384399699},{"_id":"node_modules/hexo-theme-nexmoe/source/js/copy-codeblock.js","hash":"51f1b526133258db1080826574c50a683a34c559","modified":1756384395069},{"_id":"node_modules/hexo-theme-nexmoe/scripts/tag/links.js","hash":"3676a23bdf32e0c1a933ccb8a79da6c5880a2e19","modified":1756384396908},{"_id":"node_modules/hexo-theme-nexmoe/scripts/helper/js_auto_version.js","hash":"96e6d7d0dadd39198e33ec8d5f0331e4a600ca37","modified":1756384396623},{"_id":"node_modules/hexo-theme-nexmoe/scripts/tag/gallery.js","hash":"bc07b003bd405138ff4bca5fb03ba180fc29b92e","modified":1756384396154},{"_id":"node_modules/hexo-theme-nexmoe/source/js/app.js","hash":"965c3befaa26a06484204b34f20b8770e186866a","modified":1756384394650},{"_id":"node_modules/hexo-theme-nexmoe/source/js/search.js","hash":"eb69cd78f6ab8d3e83576dae29f09c9af0ffe8b9","modified":1756384397567},{"_id":"node_modules/hexo-theme-nexmoe/layout/_layout/xiaoshu/footer.jsx","hash":"3ede4910be7915854ee06a545aa8ee04bd216031","modified":1756384399012},{"_id":"node_modules/hexo-theme-nexmoe/layout/_layout/xiaoshu/header.jsx","hash":"3ede4910be7915854ee06a545aa8ee04bd216031","modified":1756384399121},{"_id":"node_modules/hexo-theme-nexmoe/layout/_layout/nexmoe/body.jsx","hash":"7e63a37bcd01a67950fb4f52895bf9e6cf9f955b","modified":1756384398500},{"_id":"node_modules/hexo-theme-nexmoe/source/preset/plain.styl","hash":"0413a4e36642110f0a23738d10f2874e6e43ed6d","modified":1756384401847},{"_id":"node_modules/hexo-theme-nexmoe/demo/source/_posts/hello-world.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":1756384400312},{"_id":"node_modules/hexo-theme-nexmoe/source/lib/lax.min.js","hash":"1de100aa90834f1f4fae9a4deb44a73048fefff0","modified":1756384396869},{"_id":"node_modules/hexo-theme-nexmoe/layout/_layout/xiaoshu/content.jsx","hash":"13a868d0b70283aaaa49770ad530261eda7a750d","modified":1756384398764},{"_id":"node_modules/hexo-theme-nexmoe/layout/_layout/nexmoe/header.ejs","hash":"24ebcbd15daee1b6b1ede4ffaffa9b86f7154167","modified":1756384391969},{"_id":"node_modules/hexo-theme-nexmoe/layout/_partial/_post/tag.ejs","hash":"5934bcb1b256642708c97f61da85fbdbd959a078","modified":1756384393395},{"_id":"node_modules/hexo-theme-nexmoe/layout/_layout/nexmoe/content.jsx","hash":"4bfadb1ce4e732289f43f81cfce41fb35a3f2f89","modified":1756384398616},{"_id":"node_modules/hexo-theme-nexmoe/layout/_layout/nexmoe/footer.jsx","hash":"167f67e30cdb15576c9cd9dd7cc6aafb4625e069","modified":1756384398878},{"_id":"node_modules/hexo-theme-nexmoe/layout/_partial/_post/meta.ejs","hash":"be2fdf6732f49d5d3277b4e4b0a4f9fc85fa4643","modified":1756384392657},{"_id":"node_modules/hexo-theme-nexmoe/layout/_partial/_post/word-count.ejs","hash":"5415f792394b364fcbc1502971874dac6ea54de4","modified":1756384393815},{"_id":"node_modules/hexo-theme-nexmoe/source/css/_widget/hitokoto.styl","hash":"0086bb5a3f250439be64588fca075ee3326a6ad1","modified":1756384401400},{"_id":"node_modules/hexo-theme-nexmoe/source/css/_partial/archives.styl","hash":"3f401f6caf7e7ed6c0b7fe622ed02a25cc9e5237","modified":1756384400632},{"_id":"node_modules/hexo-theme-nexmoe/layout/_partial/_post/copyright.ejs","hash":"bf2cb43d66842b4bc51eb6908c588044a68d1364","modified":1756384391433},{"_id":"node_modules/hexo-theme-nexmoe/source/css/_widget/index.styl","hash":"465acffbe8cc98c3b275cc286c0991f422930b60","modified":1756384401471},{"_id":"node_modules/hexo-theme-nexmoe/layout/_layout/xiaoshu/body.jsx","hash":"1d8210e9968298440a1da0cc86c3e3454dba4427","modified":1756384398593},{"_id":"node_modules/hexo-theme-nexmoe/source/css/_partial/pagination.styl","hash":"aa22dd62542d69f07ce5178cd3f94cf20c9f1bca","modified":1756384401720},{"_id":"node_modules/hexo-theme-nexmoe/source/css/_partial/background.styl","hash":"a4c012e17734de0bf1a62bf5b5ebc98755b23bcb","modified":1756384400804},{"_id":"node_modules/hexo-theme-nexmoe/source/css/_partial/copy-codeblock.styl","hash":"83372948cb098a8ad1da8bde17963701b8e39409","modified":1756384401100},{"_id":"node_modules/hexo-theme-nexmoe/source/css/_index/list.styl","hash":"6ce0e88126225e582c4d788c4c88a30c11fee8fb","modified":1756384401653},{"_id":"node_modules/hexo-theme-nexmoe/source/lib/fancybox/fancybox.css","hash":"cbce0cfc36f47e30e9c9824875f0b854a05f1916","modified":1756384388222},{"_id":"node_modules/hexo-theme-nexmoe/source/css/_partial/py.styl","hash":"53c72cb99593d83523559013713fc25b4ae5957c","modified":1756384401902},{"_id":"node_modules/hexo-theme-nexmoe/source/css/_partial/searchbox.styl","hash":"b25cefb269bb7188ed9d6ab0b530f30e138b33d1","modified":1756384401940},{"_id":"node_modules/hexo-theme-nexmoe/source/lib/iconfont/demo.css","hash":"53456972a11d52af67187fc17999e6665f9f06fe","modified":1756384387325},{"_id":"node_modules/hexo-theme-nexmoe/source/lib/iconfont/demo_index.html","hash":"a82acbfeabc50a6668ebf6115b5c5c3d308079b6","modified":1756384394279},{"_id":"node_modules/hexo-theme-nexmoe/source/css/_partial/article.styl","hash":"726d9837026a4979dae3d9d790feba952de98b48","modified":1756384400755},{"_id":"node_modules/hexo-theme-nexmoe/source/lib/iconfont/iconfont.eot","hash":"1d1851c2197382a9b7cd3b3fcdef79a61ad331f6","modified":1756384394074},{"_id":"node_modules/hexo-theme-nexmoe/source/lib/iconfont/iconfont.css","hash":"3566d949bdc045cd816be382d180b796e0a78748","modified":1756384388634},{"_id":"node_modules/hexo-theme-nexmoe/source/lib/iconfont/iconfont.json","hash":"0dd0193f6f400e5da6d3aef89f76c22c79e0f396","modified":1756384397710},{"_id":"node_modules/hexo-theme-nexmoe/source/lib/iconfont/iconfont.woff","hash":"e292802913e6c248a17797dc24ecfc0a3473c3cf","modified":1756384402347},{"_id":"node_modules/hexo-theme-nexmoe/source/lib/iconfont/iconfont.svg","hash":"2af6d26577c3ae2ca126351f0be764cbae9da6ff","modified":1756384402165},{"_id":"node_modules/hexo-theme-nexmoe/source/lib/iconfont/iconfont.js","hash":"a536d4780220f9cd7fc5126d9ec1108b19afb6b9","modified":1756384396267},{"_id":"node_modules/hexo-theme-nexmoe/source/lib/iconfont/iconfont.ttf","hash":"b0f4b5501cbcaeaf15dc608359574a29bc4c4265","modified":1756384402312},{"_id":"node_modules/hexo-theme-nexmoe/source/css/_layout/nexmoe/content.styl","hash":"718c99320e6862a020e2652d8259c980283a6ac0","modified":1756384400900},{"_id":"node_modules/hexo-theme-nexmoe/source/css/_layout/nexmoe/header.styl","hash":"b1c905f3a6089936aa6740546c266c03a99a8169","modified":1756384401242},{"_id":"node_modules/hexo-theme-nexmoe/source/lib/iconfont/iconfont.woff2","hash":"9209e4f7e45d37e58356e5ede7ea9d6d9e922d77","modified":1756384402442},{"_id":"node_modules/hexo-theme-nexmoe/source/css/_layout/xiaoshu/footer.styl","hash":"bebef911fb8030bbfed418492e6c1c0eae2306a7","modified":1756384401135},{"_id":"node_modules/hexo-theme-nexmoe/source/css/_layout/xiaoshu/header.styl","hash":"fb047e449d0a3f37f8beffc31af0ed9ffa2da9d3","modified":1756384401287},{"_id":"node_modules/hexo-theme-nexmoe/source/css/_layout/xiaoshu/content.styl","hash":"0e382da59dfe8bb1451b115e1c32f40ed126174f","modified":1756384401015},{"_id":"node_modules/hexo-theme-nexmoe/source/lib/fancybox/fancybox.umd.js","hash":"f2126b3e96721606a2ba20e0f148404814262171","modified":1756384395782},{"_id":"node_modules/hexo-theme-nexmoe/demo/package-lock.json","hash":"37e07fd906a664c3706e684e8efcb4d86f31e3e9","modified":1756384398058},{"_id":"node_modules/hexo-theme-nexmoe/source/lib/mdui_043tiny/mdui.css","hash":"1500b5d27b8ce2e7c543bb6d7205de43059378db","modified":1756384390040},{"_id":"node_modules/hexo-theme-nexmoe/source/lib/mdui_043tiny/mdui.js","hash":"5c0bced25b23773e764338ae4581f366f984cb6c","modified":1756384397391},{"_id":"node_modules/hexo-theme-kira/package.json","hash":"7366cfb765732b16fa06f243a6cce21b6aeb1749","modified":1756385948491},{"_id":"node_modules/hexo-theme-kira/languages/it.yml","hash":"708e1a520eebd468b9895fe5f80c79c1cdca0fc8","modified":1756385950335},{"_id":"node_modules/hexo-theme-kira/languages/default.yml","hash":"975a90fd111336055181085e3c27e6f67d41f68b","modified":1756385950264},{"_id":"node_modules/hexo-theme-kira/languages/en.yml","hash":"d3e7f13edbe8c6fcf1c18f679c8fa9f919941d5b","modified":1756385950299},{"_id":"node_modules/hexo-theme-kira/languages/ja.yml","hash":"2f848f022dd6eb70893dbf0d1f68440d487b285e","modified":1756385950366},{"_id":"node_modules/hexo-theme-kira/languages/zh-CN.yml","hash":"975a90fd111336055181085e3c27e6f67d41f68b","modified":1756385950401},{"_id":"node_modules/hexo-theme-kira/languages/zh-HK.yml","hash":"52c501d778ed22d242c0cd405db38c985dbccfce","modified":1756385950453},{"_id":"node_modules/hexo-theme-kira/languages/zh-TW.yml","hash":"52c501d778ed22d242c0cd405db38c985dbccfce","modified":1756385950629},{"_id":"node_modules/hexo-theme-kira/layout/friends.ejs","hash":"0702afdbfa01a4266a29f3e018928a3a4aedd16a","modified":1756385944886},{"_id":"node_modules/hexo-theme-kira/readme.md","hash":"a32af4ed2ed53d223ad5456a5e0a45b46972306a","modified":1756385948594},{"_id":"node_modules/hexo-theme-kira/layout/index.ejs","hash":"d7dd4eba4d8b4306f78e59b7f7b7142e5e9755f2","modified":1756385945498},{"_id":"node_modules/hexo-theme-kira/layout/archives.ejs","hash":"bc09ed31aea541e207edfa0dc1482f74ed6d8361","modified":1756385944352},{"_id":"node_modules/hexo-theme-kira/layout/_widget/archive.ejs","hash":"1b7927c453a4ba3bc91f57585d1c9a028f3a2634","modified":1756385944064},{"_id":"node_modules/hexo-theme-kira/layout/layout.ejs","hash":"8b693f9d8f1579f29c3585b1f68edb0d9eea8945","modified":1756385945704},{"_id":"node_modules/hexo-theme-kira/layout/_widget/social.ejs","hash":"78ee34ba7813bc3cb9ac0155a251a7db5fc20668","modified":1756385946053},{"_id":"node_modules/hexo-theme-kira/layout/post.ejs","hash":"4ec75cf603d272ed094ea79c615cda56b861bdcb","modified":1756385945823},{"_id":"node_modules/hexo-theme-kira/layout/components/right-column.ejs","hash":"6db93a9722a5288f96ab16dd54783e187909657f","modified":1756385945876},{"_id":"node_modules/hexo-theme-kira/layout/components/friends.ejs","hash":"1833dafebc1997996b8c77d55683b1d97de2a71b","modified":1756385944762},{"_id":"node_modules/hexo-theme-kira/layout/components/copyright.ejs","hash":"7a6bf6be3cd1605c7974a33baf8b54a90a50b141","modified":1756385944666},{"_id":"node_modules/hexo-theme-kira/scripts/tag/biliplayer.js","hash":"573c7bd45e38c96c5cad922e23d19e1abd70fb7b","modified":1756385946755},{"_id":"node_modules/hexo-theme-kira/layout/components/header.ejs","hash":"c1e28f64f4ea8cbccb77bcb7ebd78a7bbecf2f94","modified":1756385945317},{"_id":"node_modules/hexo-theme-kira/layout/components/kira-image.ejs","hash":"3222ae7c8d79afc3cd5ed0f1e8ef1b51b3fdda36","modified":1756385945602},{"_id":"node_modules/hexo-theme-kira/scripts/tag/kira-player.js","hash":"cfbae6ff10abc986ea05044c536b6870f3c2a0f5","modified":1756385947762},{"_id":"node_modules/hexo-theme-kira/layout/_widget/category.ejs","hash":"249ecb1c70bcbb5dd792deb7ca597ece06497cac","modified":1756385944517},{"_id":"node_modules/hexo-theme-kira/scripts/tag/meting.js","hash":"9d9474ea97a789b3c1d7b1153c30475eca0967d9","modified":1756385948173},{"_id":"node_modules/hexo-theme-kira/scripts/utils/image_auto_lazyload.js","hash":"fef224ee29365821af9a0d4fe18f99665a65eb80","modified":1756385947572},{"_id":"node_modules/hexo-theme-kira/scripts/tag/codepen.js","hash":"8b871ebc448984b97559f07313845c384080ed0f","modified":1756385946863},{"_id":"node_modules/hexo-theme-kira/layout/components/sidebar.ejs","hash":"f3a34ba45e03f231a0acc2ca81214cbb61c80d7e","modified":1756385945977},{"_id":"node_modules/hexo-theme-kira/LICENSE","hash":"16401737d2489b2399c6bcb2274e8835bc21c2ec","modified":1756385940041},{"_id":"node_modules/hexo-theme-kira/source/css/archive.styl","hash":"014aeb1e8edee23ab191accde28b903094e0250a","modified":1756385948698},{"_id":"node_modules/hexo-theme-kira/layout/_widget/tagcloud.ejs","hash":"ae70b1e05f4b9e0bdc4bc4946aab9a2f04b62441","modified":1756385946206},{"_id":"node_modules/hexo-theme-kira/source/css/color.styl","hash":"de24fe89ea6609bedb10d6883813900613bc666c","modified":1756385948885},{"_id":"node_modules/hexo-theme-kira/source/css/article.styl","hash":"5d71b0348e8777d44fcac4dd1b42691bb60ca0a0","modified":1756385948767},{"_id":"node_modules/hexo-theme-kira/source/css/content.styl","hash":"f855d66a230c058d879afabe9440d6983228f75c","modified":1756385949073},{"_id":"node_modules/hexo-theme-kira/source/css/kira-code-copy.styl","hash":"0ec2c5bee6b740d1c470b1552b0489ce2752a43b","modified":1756385949103},{"_id":"node_modules/hexo-theme-kira/source/css/kira-friends.styl","hash":"174acae9379c2521e9658ee7a9cca78121efdb56","modified":1756385949156},{"_id":"node_modules/hexo-theme-kira/source/css/constants.styl","hash":"9882f6fdf8b0a840b461fe68b5a5781ac5f9a135","modified":1756385948973},{"_id":"node_modules/hexo-theme-kira/source/css/kira-image.styl","hash":"6012db7df3e0491f2469025b8e39e3542a389e00","modified":1756385949269},{"_id":"node_modules/hexo-theme-kira/source/css/right-column.styl","hash":"a50707cf85e00790344d1822ca6aaf3482e06e90","modified":1756385949510},{"_id":"node_modules/hexo-theme-kira/source/css/layout.styl","hash":"4638f0d7f257287e680ac67abd3241331a7f57c5","modified":1756385949351},{"_id":"node_modules/hexo-theme-kira/source/css/media.styl","hash":"24e882ac68cc8ae1bbcdd156192101c68859bdc7","modified":1756385949397},{"_id":"node_modules/hexo-theme-kira/layout/components/comments/gitalk.ejs","hash":"6ea24c937c1b38598323cae3f42c2a5e12d8fff0","modified":1756385945126},{"_id":"node_modules/hexo-theme-kira/source/js/kira-image.js","hash":"84aa358b87ca68af35b331fc1c807f68f8c22dd4","modified":1756385947754},{"_id":"node_modules/hexo-theme-kira/source/css/post.styl","hash":"30165070270d51377ab8a5b2bd6ee03d81c2ab26","modified":1756385949443},{"_id":"node_modules/hexo-theme-kira/source/lib/lazysizes.js","hash":"3d7d083ddd43da4fbc5af70d888ad2f39d7c5f9b","modified":1756385947906},{"_id":"node_modules/hexo-theme-kira/source/js/kira-code-copy.js","hash":"768b978c8bef776a5ac32b3c86df498b881f882b","modified":1756385947721},{"_id":"node_modules/hexo-theme-kira/source/css/sidebar.styl","hash":"172f73ad5a78d7976a3b0e8f69672270520002ff","modified":1756385949553},{"_id":"node_modules/hexo-theme-kira/layout/components/comments/giscus.ejs","hash":"2df2a6b98e5060d0c2dd2ef9bb2f6a690a747e16","modified":1756385945029},{"_id":"node_modules/hexo-theme-kira/source/deps/js/Meting.min.js","hash":"c9a7d747dfa8fe4d3fc7ddb096b0506f55ff1fd4","modified":1756385948295},{"_id":"node_modules/hexo-theme-kira/source/lib/smooth-scrolling.js","hash":"13c907c5a0df08f4a94be5ee2ca544b5a5a247ad","modified":1756385948401},{"_id":"node_modules/hexo-theme-kira/source/deps/js/APlayer.min.js","hash":"70c0c4a9bf698747b7c058c21287ad617355e5dd","modified":1756385946640},{"_id":"node_modules/hexo-theme-kira/source/deps/css/APlayer.min.css","hash":"7f4f8913f2d46ade2def5134e2cc8684a4b87939","modified":1756385940824},{"_id":"node_modules/hexo-theme-kira/source/lib/highlight/atom-one-dark.min.css","hash":"56dddcd32332b54853ba9eadba3c883f95f00275","modified":1756385941530},{"_id":"node_modules/hexo-theme-kira/source/lib/iconfont/demo.css","hash":"53456972a11d52af67187fc17999e6665f9f06fe","modified":1756385942241},{"_id":"node_modules/hexo-theme-kira/source/lib/iconfont/iconfont.css","hash":"84918de2a2e36d051ee51c3ea17f5d6e601714da","modified":1756385942510},{"_id":"node_modules/hexo-theme-kira/source/lib/iconfont/demo_index.html","hash":"65b9325f267371c9e5a07a7a3a224c5766d07c18","modified":1756385946344},{"_id":"node_modules/hexo-theme-kira/source/lib/iconfont/iconfont.js","hash":"72c1211ab8026e3f7419f05bf8860fac6e96fe65","modified":1756385947481},{"_id":"node_modules/hexo-theme-kira/source/lib/iconfont/iconfont.json","hash":"fccceb7956fd4f43c5ce1a18a100513ba353753c","modified":1756385948478},{"_id":"node_modules/hexo-theme-kira/source/lib/iconfont/iconfont.ttf","hash":"a066712350eb107bdfeb78130ec4ce58d3a29655","modified":1756385949603},{"_id":"node_modules/hexo-theme-kira/source/lib/iconfont/iconfont.woff","hash":"7938931f0d753453933c6c75ff1ff1d02b51c983","modified":1756385949688},{"_id":"node_modules/hexo-theme-kira/source/lib/iconfont/iconfont.woff2","hash":"47b0a99b271ef70b3663dab0d611e471db59a49b","modified":1756385949795},{"_id":"node_modules/hexo-theme-kira/source/lib/highlight/highlight.min.js","hash":"9b0794e07fb0b700c73032b6ea596d88b2bbe196","modified":1756385947405},{"_id":"node_modules/hexo-theme-kira/source/lib/mdui/mdui.min.js","hash":"003a814293e06d95d569b7ba7bb4d2eb2a774caa","modified":1756385948083},{"_id":"node_modules/hexo-theme-kira/source/lib/fonts/roboto/Roboto-Bold.woff2","hash":"9074123ec9d4d6a7e21c2bee3f0110ca9a73733d","modified":1756385949940},{"_id":"node_modules/hexo-theme-kira/source/lib/fonts/roboto/Roboto-Medium.woff2","hash":"9f358fd5f441565282b54e8dc072a7d68f71a2fc","modified":1756385950033},{"_id":"node_modules/hexo-theme-kira/source/lib/fonts/roboto/Roboto-Regular.woff2","hash":"a18bcf95ada923da31f176137b8add02b0ba60f3","modified":1756385950219},{"_id":"node_modules/hexo-theme-kira/source/lib/mdui/mdui.min.css","hash":"5b08b35be36d94907e2205c3ed221db03a1f7b69","modified":1756385943824},{"_id":"source/friends.md","hash":"c7bd7ad6c95d75c506b9ed8dd6355fdcf2ab35a6","modified":1756385483631},{"_id":"source/about.md","hash":"fce902adc169ae9490af10a4db798b1e732dc83c","modified":1756385483627},{"_id":"source/archive.md","hash":"00d3773d9b4a900f930fab0daa16a60e505470b1","modified":1756385483628},{"_id":"source/About-Kei/index.md","hash":"3787e5b137816efaa5c3ca0dd430a701d5ab5650","modified":1756450842271},{"_id":"source/pic/125349440_p0.png","hash":"731cb93b4cb2513938e5f7e7e2e49f613a4a8ee8","modified":1748400423311},{"_id":"source/pic/125981673_p0.png","hash":"2734031ed178567d5f3b16dfbac527b26db57e6c","modified":1751698164830},{"_id":"source/pic/101573594_p0.png","hash":"1c49ad11716ea306db3f43891b52882d8cd80c38","modified":1756435256108},{"_id":"source/_posts/aboutKei.md","hash":"9556c14570c3b8f0f8a62b61be50426fb476d945","modified":1756451004372},{"_id":"source/_posts/PythonTips.md","hash":"4d9240d897340612e850b2b9a2e6aa5bb0c93b6c","modified":1757161759203},{"_id":"source/_posts/JavaTips.md","hash":"57e2109f48691c29b4cb3f3cba0c88fad5151bd3","modified":1757161761188}],"Category":[],"Data":[],"Page":[{"title":"我的朋友","layout":"friends","_content":"\n## 我的朋友\n","source":"friends.md","raw":"---\ntitle: 我的朋友\nlayout: friends\n---\n\n## 我的朋友\n","date":"2025-08-28T12:51:23.631Z","updated":"2025-08-28T12:51:23.631Z","path":"friends.html","comments":1,"_id":"cmewhimqd0000u4tla9s18h1z","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><html><head></head><body><h2><span id=\"%E6%88%91%E7%9A%84%E6%9C%8B%E5%8F%8B\">我的朋友</span></h2></body></html>","excerpt":"","more":"<h2 id=\"我的朋友\"><a href=\"#我的朋友\" class=\"headerlink\" title=\"我的朋友\"></a>我的朋友</h2>"},{"title":"文章归档","layout":"archives","_content":"","source":"archive.md","raw":"---\ntitle: 文章归档\nlayout: archives\n---\n","date":"2025-08-28T12:51:23.628Z","updated":"2025-08-28T12:51:23.628Z","path":"archive.html","comments":1,"_id":"cmewhimqh0001u4tl112f0vou","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><html><head></head><body></body></html>","excerpt":"","more":""},{"title":"关于本人","layout":"about","_content":"\n## 自我介绍\n","source":"about.md","raw":"---\ntitle: 关于本人\nlayout: about\n---\n\n## 自我介绍\n","date":"2025-08-28T12:51:23.627Z","updated":"2025-08-28T12:51:23.627Z","path":"about.html","comments":1,"_id":"cmewhimqi0003u4tl4atj5kog","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><html><head></head><body><h2><span id=\"%E8%87%AA%E6%88%91%E4%BB%8B%E7%BB%8D\">自我介绍</span></h2></body></html>","excerpt":"","more":"<h2 id=\"自我介绍\"><a href=\"#自我介绍\" class=\"headerlink\" title=\"自我介绍\"></a>自我介绍</h2>"}],"Post":[{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"date":"2025-08-27T15:35:33.478Z","updated":"2025-08-27T15:25:28.891Z","comments":1,"layout":"post","photos":[],"_id":"cmeu56jwa00005ktlgasi69ia","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"title":"test","date":"2025-08-27T15:40:50.000Z","_content":"","source":"_posts/test.md","raw":"---\ntitle: test\ndate: 2025-08-27 23:40:50\ntags:\n---\n","slug":"test","published":1,"updated":"2025-08-27T15:40:50.494Z","comments":1,"layout":"post","photos":[],"_id":"cmeu56jwd00015ktlb5y9ei7b","content":"","excerpt":"","more":""},{"title":"About Kei","date":"2025-08-29T07:00:42.000Z","_content":"","source":"_posts/aboutKei.md","raw":"---\ntitle: About Kei\ndate: 2025-08-29 15:00:42\ntags: txt\n---","slug":"aboutKei","published":1,"updated":"2025-08-29T07:03:24.372Z","comments":1,"layout":"post","photos":[],"_id":"cmewhlst20000c0tl6a4l66i8","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><html><head></head><body></body></html>","excerpt":"","more":""},{"title":"Java笔记(持续更新...)","date":"2025-09-03T13:45:00.000Z","cover":"https://kei-blog.oss-cn-beijing.aliyuncs.com/asset/115945063_p0-cut.jpg","_content":"\n\n# Java知识点\n---\n## 目录\n\n> [静态变量、静态方法](#静态变量静态方法)\n> [继承](#继承)\n> [多态](#多态)\n> [final关键字](#final-关键字)\n> [设计模式](#设计模式)\n> [枚举类](#枚举类)\n> [抽象类](#抽象类)\n> [接口](#接口)\n> [代码块](#代码块)\n> [内部类](#内部类)\n> [函数式编程](#函数式编程)\n> [常用API](#常用api)\n> [GUI编程](#gui编程)\n\n\n---\n## 静态变量、静态方法\n\n[返回目录](#目录)\n\n### 定义\n1. **静态变量（类变量）**：属于类，只加载一份，可以被类和类的全部对象访问\n2. **实例变量（对象变量）**：属于对象，每个对象有自己一份\n3. **静态方法（类方法）**：属于类，只能访问静态变量，不能访问实例变量\n4. **实例方法（对象方法）**：属于对象\n\n### 应用\n1. **静态变量**的应用实例: 记录对象的创建数量\n2. **静态方法**应用实例：对于只需要完成某个功能，而不需要直接访问对象的数据的方法，可以使用静态方法\n~~~java\npublic class Student {\n    // 静态变量（类变量）：属于类，只加载一份，可以被类和类的全部对象访问\n    static String schoolName;\n    // 实例变量（对象变量）：属于对象，每个对象有自己一份\n    String name;\n    // 静态变量的应用实例: 记录对象的创建数量\n    static Integer count = 0 ;\n\n\n    public Student(String name){\n        this.name = name;\n        // 同一个类中，访问静态变量，类名可以不写\n        count++;\n    }\n\n    public Student(){\n        count++;\n    }\n\n    // 静态方法（类方法）：属于类，只能访问静态变量，不能访问实例变量\n    // 静态方法应用实例：对于只需要完成某个功能，而不需要直接访问对象的数据的方法，可以使用静态方法\n    public static void printHelloWorld(){\n        System.out.println(\"Hello World\");\n    }\n\n    // 实例方法（对象方法）：属于对象\n    public void printName(){\n        System.out.println(name);\n    }\n\n}\n~~~\n\n### 注意事项\n1. **静态方法**可以直接访问**静态变量**，不能直接访问**实例变量**\n2. **实例方法**既可以直接访问**静态变量**，也可以直接访问**实例变量**\n3. **静态方法**不能使用`this`关键字（不属于对象，自然不可以用`this`）\n\n### 访问方式\n1. **静态变量**访问方式：**类名**.静态成员变量名<font color=red>（推荐方式）</font>\n2. **静态变量**访问方式：**对象名**.静态成员变量名（不推荐）\n3. **静态方法**访问方式：**类名**.静态方法名\n\n## 继承\n\n[返回目录](#目录)\n\n### 子类构造器的特点\n1. 子类的全部构造器，都会先调用父类的构造器，再调用自己的构造器\n2. 默认情况下，子类构造器的第一行都是`super();`(**写不写都有**)调用父类构造器，可自行指定有参还是无参\n\n### 兄弟构造器\n1. 构造器中可以使用`this(参数);`调用兄弟构造器，可用于为某个参数赋予默认值\n2. `super();`和`this();`必须写在构造器的**第一行**，并且**不能同时使用**\n\n## 多态\n\n[返回目录](#目录)\n\n### 认识多态\n1. 多态是在**继承/实现**情况下的一种现象，表现为**对象多态、行为多态**\n```java\npublic class main {\n    public static void main(String[] args) {\n        // 对象多态\n        Animal wolf = new Wolf();\n        Animal dog = new Dog();\n\n        // 行为多态\n        wolf.run();\n        System.out.println(wolf.name);\n        dog.run();\n        System.out.println(dog.name);\n\n        // 多态的好处2：定义方法时，使用父类的形参，可以接收一切子类对象，拓展性强\n        goRun(wolf);\n        goRun(dog);\n\n        // 强制类型转换，解决多态下无法调用子类独有方法的问题\n        // 注意：对象的真实类型与强制转换的类型不同，会导致ClassCastException异常\n        Wolf newWolf = (Wolf)wolf;\n        Dog newDog = (Dog)dog;\n        newWolf.howl();\n        newDog.bark();\n\n        // instanceof 判断对象是否是某个类的实例\n        if(wolf instanceof Dog){\n            Dog newNewDog = (Dog)wolf;\n        } else if(wolf instanceof Wolf){\n            Wolf newNewWolf = (Wolf)wolf;\n        }\n\n    }\n\n    // 多态的好处2：定义方法时，使用父类的形参，可以接收一切子类对象，拓展性强\n    public static void goRun(Animal animal){\n        animal.run();\n    }\n}\n\npublic class Animal {\n    String name = \"animal\";\n    public void run(){\n        System.out.println(\"running\");\n    }\n}\n\npublic class Dog extends Animal{\n    String name = \"Dog\";\n    @Override\n    public void run()\n    {\n        System.out.println(\"Dog is running\");\n    }\n\n    // 多态无法调用子类独有的方法\n    public void bark()\n    {\n        System.out.println(\"Dog is barking\");\n    }\n}\n\npublic class Wolf extends Animal{\n    String name = \"Wolf\";\n    @Override\n    public void run()\n    {\n        System.out.println(\"Wolf is running\");\n    }\n\n    // 多态无法调用子类独有的方法\n    public void howl()\n    {\n        System.out.println(\"Wolf is howling\");\n    }\n}\n```\n2. `run()`方法：编译看左`Animal`，运行看右`Dog/Wolf`\n3. `name`属性：编译看左`Animal`，运行看也左`Animal`\n\n### 多态的特性\n1. 多态模式下，右边的对象是解耦合的，便于拓展和维护\n2. 定义方法时，使用父类的形参，可以接收一切子类对象，拓展性强\n3. 多态模式下，无法调用子类独有的方法\n4. 多态模式下，强制类型转换成子类对象，此时可以调用子类独有的方法\n5. 对象的真实类型与强制转换的类型不同，会导致`ClassCastException`异常\n6. `instanceof` 判断对象是否是某个类的实例，强制类型转换之前可以检查是否是某个类的实例\n\n## final 关键字\n\n[返回目录](#目录)\n\n### 基本概念\n1. `final` 关键字修饰类：表示该类不能被继承，称为**最终类**\n2. `final` 关键字修饰方法：表示该方法不能被重写，称为**最终方法**\n3. `final` 关键字修饰变量：表示该变量有且仅能赋值一次\n\n### 使用场景\n1. 使用`final`修饰**静态变量**，可以声明一个**常量**，通常作为系统配置信息，不再修改(常量通常全大写，多个单词用下划线连接，如`MAX_SIZE`)\n2. 使用`final`修饰**基本变量**，变量储存的**数据**不能改变\n3. 使用`final`修饰**引用变量**(类对象、数组对象)，变量存储的**地址**不能改变，但对象内部数据可以改变\n\n## 设计模式\n\n[返回目录](#目录)\n\n### 单例设计模式\n#### 作用\n确保某个类只创建一个对象\n\n#### 实现方式\n##### 饿汉式单例--用对象之前已创建完毕\n1. 将类的构造器私有\n2. 定义一个类变量记住一个对象\n3. 定义一个类方法获取对象\n\n~~~java\n// 饿汉式单例\npublic class A {\n    // 1. 私有化构造器：确保单例类对外不能创建对象\n    private A(){\n    }\n\n    // 2. 创建静态成员变量记住唯一的一个实例\n    private static final A a = new A();\n\n    // 3. 创建静态方法，返回唯一实例\n    public static A getInstance(){\n        return a;\n    }\n}\n~~~\n\n##### 懒汉式单例--用对象时才创建对象\n\n~~~java\n// 懒汉式单例\npublic class B {\n    // 私有化构造器\n    private B(){}\n\n    // 静态变量记住唯一实例\n    private static B b;\n\n    // 静态方法获取唯一实例\n    public static B getInstance(){\n        if(b == null){\n            b = new B();\n        }\n        return b;\n    }\n}\n~~~\n\n---\n### 模板方法设计模式\n#### 基本概念\n提供一个方法作为完成某类功能的模板，模板方法封装了每个实现步骤，但允许子类提供特定步骤的实现\n#### 实现方式\n1. 定义模板方法，把共同实现步骤放进去\n2. 定义抽象方法，交给具体的子类完成\n3. 建议使用`final`修饰模板方法，防止被重写\n\n~~~java\npublic abstract class People {\n    // 模板方法设计模式\n    public final void write(){\n        System.out.println(\"重复部分代码\");\n        // 模板方法知道子类一定要重写的部分\n        // 使用抽象方法来实现重写部分\n        writeMain();\n\n        System.out.println(\"重复部分代码\");\n    }\n\n    // 定义一个抽象方法，子类必须实现\n    public abstract void writeMain();\n}\n\npublic class Student extends People{\n\n    @Override\n    public void writeMain() {\n        System.out.println(\"学生写代码\");\n    }\n}\n\npublic class Teacher extends People{\n    @Override\n    public void writeMain() {\n        System.out.println(\"老师写代码\");\n    }\n}\n~~~\n\n## 枚举类\n[返回目录](#目录)\n\n### 特点\n1. 枚举类都是最终类，不能被继承，都继承自`java.lang.Enum`\n2. 枚举类第一行只能罗列一些名称，这些名称是常量，每个常量会记住枚举类的一个对象\n3. 枚举类的构造器都是私有的，不能对外创建对象\n~~~java\n// 反编译后的枚举类结构\npublic final class com.kei.enumDemo.A extends java.lang.Enum<com.kei.enumDemo.A> {\n  public static final com.kei.enumDemo.A X;\n  public static final com.kei.enumDemo.A Y;\n  public static final com.kei.enumDemo.A Z;\n  public static com.kei.enumDemo.A[] values();\n  public static com.kei.enumDemo.A valueOf(java.lang.String);\n  static {};\n}\n~~~\n\n### Api\n1. `name()`：返回枚举常量的名称\n2. `ordinal()`：返回枚举常量的索引，索引从0开始\n\n### 使用场景\n1. 枚举类一般用于信息分类和标志\n2. 枚举类作为形参可以约束传入参数\n\n\n## 抽象类\n[返回目录](#目录)\n### 抽象类和抽象方法\n1. 抽象类：抽象类不能实例化对象，只能被继承\n2. 抽象方法：抽象方法没有方法体，方法体由子类实现\n\n## 接口\n[返回目录](#目录)\n### 基本概念\n`interface` 关键字定义接口\n1. 定义常量，接口中的常量public static final 可以不写，默认是public static final\n2. 定义抽象方法，接口中的抽象方法public abstract 可以不写，默认是public abstract\n3. 接口不能实例化对象\n4. 接口可以被实现类通过`implements`关键字**实现**，一个类只能**继承**一个父类，但可以**实现**多个接口\n5. 实现类必须实现所有接口中的抽象方法，否则必须声明抽象类\n\n### 接口的好处\n1. 解决了单继承的不足，使类的角色更多\n2. 面相接口编程，进一步解耦合\n\n### JDK8 新特性\n1. 默认方法：使用`default`关键字定义，默认被`public`修饰，只能由接口实现类对象调用，实际上是对象（实例）方法\n2. 私有方法：使用`private`关键字定义，只能由接口内部其他实例调用，不能被继承\n3. 静态方法：使用`static`关键字定义，默认被`public`修饰，只能由接口名称调用，实际上是类方法\n\n### 注意事项\n1. 多继承：**接口**可以继承多个**接口**\n2. 多实现：**接口**可以被多个**类**实现\n3. 一个接口继承多个接口时，若存在签名冲突，则不支持多继承和多实现\n4. 一个接口继承多个接口时，若存在同名默认方法，重写该方法可以不冲突\n5. 一个类继承了父类，同时实现了接口，若有同名方法，则父类方法优先\n6. 一个类继承了父类，同时实现了接口，若有同名方法，可通过`接口名.super.接口方法()`调用接口方法\n\n\n## 代码块\n\n[返回目录](#目录)\n\n### 静态代码块\n**格式**：`static{ }`\n**特点**：**类**加载时自动执行，只执行一次\n**作用**：完成**类**的初始化，静态变量的初始化赋值\n\n### 实例代码块\n**格式**：`{ }`\n**特点**：**对象**创建时自动执行，每次创建对象都会执行\n**作用**：完成**对象**的初始化，实例变量的初始化赋值\n\n## 内部类\n\n[返回目录](#目录)\n\n### 基本概念\n当一个类定义在另一个类的内部，这个类就是内部类\n当一个类的内部，包含一个完整的事物，且这个事物没必要单独设计，这个类可以被设计为内部类\n\n### 成员内部类\n1. 定义在外部类内，无`static`修饰，属于**外部类对象持有**的\n2. 创建内部类对象的语法：`外部类名.内部类名 对象名 = new 外部类对象().new 内部类名()`\n3. 成员内部类可以直接访问外部类**静态成员**，也可以访问外部类**实例成员**（成员内部类寄生于外部类对象）\n4. 成员内部类可以通过`外部类名.this`访问外部类对象\n\n### 静态内部类\n1. 定义在外部类内，有`static`修饰，属于**外部类持有**的\n2. 创建内部类对象的语法：`外部类名.内部类名 对象名 = new 外部类名.内部类名()`\n3. 静态内部类可以直接访问外部类**静态成员**，不能访问外部类**实例成员**\n\n### 匿名内部类\n1. 匿名内部类是一种特殊的局部内部类，不需要声明类名，默认有一个隐藏的名称\n2. 匿名内部类本质是一个子类，并且会立即创建一个子类对象，编译后会生成一个 `类名$编号.class` 文件\n~~~java\nnew 类或接口(参数){\n    类体（一般是方法重写）\n}\n~~~\n3. 用于更方便创建子类\n\n## 函数式编程\n\n[返回目录](#目录)\n\n### Lambda 表达式\n1. 语法：`(参数列表) -> {方法体}`\n2. 函数式接口：只有一个抽象方法的接口\n3. 可以简化函数式接口的匿名内部类\n\n### 静态方法引用\n1. 格式：`类名::静态方法名`\n2. 如果一个Lambda表达式里只调用一个静态方法，并且`->`前后的参数的形式一致，则可以使用静态方法引用\n\n### 实例方法引用\n1. 语法：`对象::实例方法名`\n2. 如果一个Lambda表达式里只调用一个实例方法，并且`->`前后的参数的形式一致，则可以使用实例方法引用\n\n### 特定类型方法引用\n1. 语法：`特定类名::实例方法名`\n2. 如果某个Lambda表达式里只是调用一个特定类型的实例方法，并且前面参数列表的第一个参数作为方法的主调，后面所有参数都是作为实例方法的入参，则可以使用特定类型方法引用\n\n~~~java\npublic class Main2 {\n    public static void main(String[] args) {\n        // 需求：一个英文人名数组，按字母升序排序\n        String[] names = {\"Tom\", \"Jerry\", \"Mike\", \"Mary\", \"Smith\", \"Kate\", \"tom\", \"jam\", \"milk\"};\n\n        // 排序\n        Arrays.sort(names);\n        // 忽略首字母大小写\n        Arrays.sort(names, new Comparator<String>() {\n            @Override\n            public int compare(String o1, String o2) {\n                // compareToIgnoreCase(): 忽略大小写\n                return o1.compareToIgnoreCase(o2);\n            }\n        });\n\n        // Lambda 表达式\n        Arrays.sort(names, (o1, o2) -> o1.compareToIgnoreCase(o2));\n\n        // 特定的方法引用：类名::方法名\n        Arrays.sort(names, String::compareToIgnoreCase);\n\n        System.out.println(Arrays.toString(names));\n\n    }\n}\n~~~\n\n### 构造器引用\n1. 语法：`类名::new`\n2. 如果某个Lambda表达式里只是在创建对象，并且`->`前后的参数形式一致，则可以使用构造器引用\n\n~~~java\npublic class Main3 {\n    public static void main(String[] args) {\n        CarFactory factory = new CarFactory() {\n            @Override\n            public Car create(String name) {\n                return new Car(name);\n            }\n        };\n        // Lambda 表达式\n        CarFactory factory2 = (name) -> new Car(name);\n\n        // 构造器引用\n        CarFactory factory3 = Car::new;\n    }\n\n}\n\n@FunctionalInterface\ninterface CarFactory {\n    Car create(String name);\n}\n\n@Data\n@NoArgsConstructor\n@AllArgsConstructor\nclass Car{\n    private String name;\n}\n~~~\n\n## 常用API\n\n[返回目录](#目录)\n\n> [String](#string)\n> [ArrayList](#arraylist)\n\n### String\n#### 创建字符串\n1. **方式一**：`String str = \"hello world\";`\n2. 方式二：调用构造器创建字符串对象\n   1. `String str = new String();` 创建一个空字符串对象\n   2. `String str = new String(\"hello world\");` 创建一个字符串对象\n   3. `String str = new String(char[] value);` 根据字符数组创建一个字符串对象\n   4. `String str = new String(byte[] value);` 根据字节数组创建一个字符串对象\n3. 方式一存放在**常量池**中，且相同的字符串对象只创建一个\n4. 方式二存放在**堆**中，且相同内容可以创建多个对象\n\n#### 处理字符串\n| 方法 | 作用 |\n| --- | --- |\n|`int length()`|获取字符串长度|\n|`boolean equals(Object obj)`|字符串内容比较（`==`比较的是字符串地址！）|\n|`char charAt(int index)`|获取索引处的字符|\n|`char[] toCharArray()`|转换成字符数组|\n|`boolean equalsIgnoreCase(String str)`|判断字符串内容是否一致，忽略大小写|\n|`String substring(int beginIndex, int endIndex)`|根据索引截取字符串|\n|`String substring(int beginIndex)`|从索引处截取字符串|\n|`String replace(CharSequence oldChar, CharSequence newChar)`|新值替换旧值|\n|`boolean contains(CharSequence s)`|判断字符串中是否包含子串|\n|`boolean startsWith(String prefix)`|判断字符串是否以指定字符开头|\n|`String[] split(String regex)`|将字符串按某个字符分割为字符串数组|\n\n### ArrayList\n| 方法 | 作用 |\n| --- | --- |\n|`ArrayList<E>()`|创建一个空的集合对象，E为集合中元素的数据类型，可不指定|\n|`boolean add(E e)`|添加元素到集合末尾|\n|`void add(int index, E element)`|在指定索引处添加元素|\n|`E get(int index)`|获取指定索引处的元素|\n|`int size()`|获取集合大小|\n|`E remove(int index)`|删除指定索引处的元素，返回删除的元素|\n|`boolean remove(Object o)`|删除指定元素，返回是否删除成功|\n|`E set(int index, E element)`|修改指定索引处的元素，返回修改前的元素|\n\n\n\n## *GUI编程\n> 目前项目开发几乎不使用Java来开发GUI界面，仅了解\n\n[返回目录](#目录)\n\n### 常见的Swing组件\n|组件|作用|\n| --- | --- |\n|[JFrame](#jframe)|窗口|\n|[JPanel](#jpanel)|面板，用于组织其他组件的容器|\n|[JButton](#jbutton)|按钮|\n|JTextField|文本输入框|\n|JTable|表格|\n\n### JFrame\n|API|作用|value|\n| --- | --- | --- |\n|`void setSize(int width, int height)`|设置窗口大小|\n|`void setLocationRelativeTo(Component c)`|设置窗口位置|\n|`void setDefaultCloseOperation(int operation)`|设置关闭方式|`JFrame.EXIT_ON_CLOSE` 关闭窗口时退出程序|\n|`void setVisible(boolean b)`|设置窗口是否可见|\n|`void add(Component c)`|添加组件|\n\n### JPanel\n[back to GUI编程](#gui编程)\n|API|作用|value|\n| --- | --- | --- |\n|`void add(Component c)`|添加组件|\n\n### JButton\n[back to GUI编程](#gui编程)\n|API|作用|value|\n| --- | --- | --- |\n|`void setText(String text)`|设置按钮文本|\n\n### Layout Manager\n[back to GUI编程](#gui编程)\n|Layout Manager|作用|\n| --- | --- |\n|`BorderLayout`|边界布局，将容器分成5个区域，North、South、East、West、Center，每个区域只有一个组件|\n|`FlowLayout`|流式布局，组件排满一行自动换行|\n|`GridLayout`|网格布局，组件会自动填充|\n|`GridBagLayout`|网格布局，组件会自动填充|\n\n\n\n\n\n\n\n\n\n","source":"_posts/JavaTips.md","raw":"---\ntitle: Java笔记(持续更新...)\ndate: 2025-09-03 21:45:00\ntags: Java\ncover: https://kei-blog.oss-cn-beijing.aliyuncs.com/asset/115945063_p0-cut.jpg\n---\n\n\n# Java知识点\n---\n## 目录\n\n> [静态变量、静态方法](#静态变量静态方法)\n> [继承](#继承)\n> [多态](#多态)\n> [final关键字](#final-关键字)\n> [设计模式](#设计模式)\n> [枚举类](#枚举类)\n> [抽象类](#抽象类)\n> [接口](#接口)\n> [代码块](#代码块)\n> [内部类](#内部类)\n> [函数式编程](#函数式编程)\n> [常用API](#常用api)\n> [GUI编程](#gui编程)\n\n\n---\n## 静态变量、静态方法\n\n[返回目录](#目录)\n\n### 定义\n1. **静态变量（类变量）**：属于类，只加载一份，可以被类和类的全部对象访问\n2. **实例变量（对象变量）**：属于对象，每个对象有自己一份\n3. **静态方法（类方法）**：属于类，只能访问静态变量，不能访问实例变量\n4. **实例方法（对象方法）**：属于对象\n\n### 应用\n1. **静态变量**的应用实例: 记录对象的创建数量\n2. **静态方法**应用实例：对于只需要完成某个功能，而不需要直接访问对象的数据的方法，可以使用静态方法\n~~~java\npublic class Student {\n    // 静态变量（类变量）：属于类，只加载一份，可以被类和类的全部对象访问\n    static String schoolName;\n    // 实例变量（对象变量）：属于对象，每个对象有自己一份\n    String name;\n    // 静态变量的应用实例: 记录对象的创建数量\n    static Integer count = 0 ;\n\n\n    public Student(String name){\n        this.name = name;\n        // 同一个类中，访问静态变量，类名可以不写\n        count++;\n    }\n\n    public Student(){\n        count++;\n    }\n\n    // 静态方法（类方法）：属于类，只能访问静态变量，不能访问实例变量\n    // 静态方法应用实例：对于只需要完成某个功能，而不需要直接访问对象的数据的方法，可以使用静态方法\n    public static void printHelloWorld(){\n        System.out.println(\"Hello World\");\n    }\n\n    // 实例方法（对象方法）：属于对象\n    public void printName(){\n        System.out.println(name);\n    }\n\n}\n~~~\n\n### 注意事项\n1. **静态方法**可以直接访问**静态变量**，不能直接访问**实例变量**\n2. **实例方法**既可以直接访问**静态变量**，也可以直接访问**实例变量**\n3. **静态方法**不能使用`this`关键字（不属于对象，自然不可以用`this`）\n\n### 访问方式\n1. **静态变量**访问方式：**类名**.静态成员变量名<font color=red>（推荐方式）</font>\n2. **静态变量**访问方式：**对象名**.静态成员变量名（不推荐）\n3. **静态方法**访问方式：**类名**.静态方法名\n\n## 继承\n\n[返回目录](#目录)\n\n### 子类构造器的特点\n1. 子类的全部构造器，都会先调用父类的构造器，再调用自己的构造器\n2. 默认情况下，子类构造器的第一行都是`super();`(**写不写都有**)调用父类构造器，可自行指定有参还是无参\n\n### 兄弟构造器\n1. 构造器中可以使用`this(参数);`调用兄弟构造器，可用于为某个参数赋予默认值\n2. `super();`和`this();`必须写在构造器的**第一行**，并且**不能同时使用**\n\n## 多态\n\n[返回目录](#目录)\n\n### 认识多态\n1. 多态是在**继承/实现**情况下的一种现象，表现为**对象多态、行为多态**\n```java\npublic class main {\n    public static void main(String[] args) {\n        // 对象多态\n        Animal wolf = new Wolf();\n        Animal dog = new Dog();\n\n        // 行为多态\n        wolf.run();\n        System.out.println(wolf.name);\n        dog.run();\n        System.out.println(dog.name);\n\n        // 多态的好处2：定义方法时，使用父类的形参，可以接收一切子类对象，拓展性强\n        goRun(wolf);\n        goRun(dog);\n\n        // 强制类型转换，解决多态下无法调用子类独有方法的问题\n        // 注意：对象的真实类型与强制转换的类型不同，会导致ClassCastException异常\n        Wolf newWolf = (Wolf)wolf;\n        Dog newDog = (Dog)dog;\n        newWolf.howl();\n        newDog.bark();\n\n        // instanceof 判断对象是否是某个类的实例\n        if(wolf instanceof Dog){\n            Dog newNewDog = (Dog)wolf;\n        } else if(wolf instanceof Wolf){\n            Wolf newNewWolf = (Wolf)wolf;\n        }\n\n    }\n\n    // 多态的好处2：定义方法时，使用父类的形参，可以接收一切子类对象，拓展性强\n    public static void goRun(Animal animal){\n        animal.run();\n    }\n}\n\npublic class Animal {\n    String name = \"animal\";\n    public void run(){\n        System.out.println(\"running\");\n    }\n}\n\npublic class Dog extends Animal{\n    String name = \"Dog\";\n    @Override\n    public void run()\n    {\n        System.out.println(\"Dog is running\");\n    }\n\n    // 多态无法调用子类独有的方法\n    public void bark()\n    {\n        System.out.println(\"Dog is barking\");\n    }\n}\n\npublic class Wolf extends Animal{\n    String name = \"Wolf\";\n    @Override\n    public void run()\n    {\n        System.out.println(\"Wolf is running\");\n    }\n\n    // 多态无法调用子类独有的方法\n    public void howl()\n    {\n        System.out.println(\"Wolf is howling\");\n    }\n}\n```\n2. `run()`方法：编译看左`Animal`，运行看右`Dog/Wolf`\n3. `name`属性：编译看左`Animal`，运行看也左`Animal`\n\n### 多态的特性\n1. 多态模式下，右边的对象是解耦合的，便于拓展和维护\n2. 定义方法时，使用父类的形参，可以接收一切子类对象，拓展性强\n3. 多态模式下，无法调用子类独有的方法\n4. 多态模式下，强制类型转换成子类对象，此时可以调用子类独有的方法\n5. 对象的真实类型与强制转换的类型不同，会导致`ClassCastException`异常\n6. `instanceof` 判断对象是否是某个类的实例，强制类型转换之前可以检查是否是某个类的实例\n\n## final 关键字\n\n[返回目录](#目录)\n\n### 基本概念\n1. `final` 关键字修饰类：表示该类不能被继承，称为**最终类**\n2. `final` 关键字修饰方法：表示该方法不能被重写，称为**最终方法**\n3. `final` 关键字修饰变量：表示该变量有且仅能赋值一次\n\n### 使用场景\n1. 使用`final`修饰**静态变量**，可以声明一个**常量**，通常作为系统配置信息，不再修改(常量通常全大写，多个单词用下划线连接，如`MAX_SIZE`)\n2. 使用`final`修饰**基本变量**，变量储存的**数据**不能改变\n3. 使用`final`修饰**引用变量**(类对象、数组对象)，变量存储的**地址**不能改变，但对象内部数据可以改变\n\n## 设计模式\n\n[返回目录](#目录)\n\n### 单例设计模式\n#### 作用\n确保某个类只创建一个对象\n\n#### 实现方式\n##### 饿汉式单例--用对象之前已创建完毕\n1. 将类的构造器私有\n2. 定义一个类变量记住一个对象\n3. 定义一个类方法获取对象\n\n~~~java\n// 饿汉式单例\npublic class A {\n    // 1. 私有化构造器：确保单例类对外不能创建对象\n    private A(){\n    }\n\n    // 2. 创建静态成员变量记住唯一的一个实例\n    private static final A a = new A();\n\n    // 3. 创建静态方法，返回唯一实例\n    public static A getInstance(){\n        return a;\n    }\n}\n~~~\n\n##### 懒汉式单例--用对象时才创建对象\n\n~~~java\n// 懒汉式单例\npublic class B {\n    // 私有化构造器\n    private B(){}\n\n    // 静态变量记住唯一实例\n    private static B b;\n\n    // 静态方法获取唯一实例\n    public static B getInstance(){\n        if(b == null){\n            b = new B();\n        }\n        return b;\n    }\n}\n~~~\n\n---\n### 模板方法设计模式\n#### 基本概念\n提供一个方法作为完成某类功能的模板，模板方法封装了每个实现步骤，但允许子类提供特定步骤的实现\n#### 实现方式\n1. 定义模板方法，把共同实现步骤放进去\n2. 定义抽象方法，交给具体的子类完成\n3. 建议使用`final`修饰模板方法，防止被重写\n\n~~~java\npublic abstract class People {\n    // 模板方法设计模式\n    public final void write(){\n        System.out.println(\"重复部分代码\");\n        // 模板方法知道子类一定要重写的部分\n        // 使用抽象方法来实现重写部分\n        writeMain();\n\n        System.out.println(\"重复部分代码\");\n    }\n\n    // 定义一个抽象方法，子类必须实现\n    public abstract void writeMain();\n}\n\npublic class Student extends People{\n\n    @Override\n    public void writeMain() {\n        System.out.println(\"学生写代码\");\n    }\n}\n\npublic class Teacher extends People{\n    @Override\n    public void writeMain() {\n        System.out.println(\"老师写代码\");\n    }\n}\n~~~\n\n## 枚举类\n[返回目录](#目录)\n\n### 特点\n1. 枚举类都是最终类，不能被继承，都继承自`java.lang.Enum`\n2. 枚举类第一行只能罗列一些名称，这些名称是常量，每个常量会记住枚举类的一个对象\n3. 枚举类的构造器都是私有的，不能对外创建对象\n~~~java\n// 反编译后的枚举类结构\npublic final class com.kei.enumDemo.A extends java.lang.Enum<com.kei.enumDemo.A> {\n  public static final com.kei.enumDemo.A X;\n  public static final com.kei.enumDemo.A Y;\n  public static final com.kei.enumDemo.A Z;\n  public static com.kei.enumDemo.A[] values();\n  public static com.kei.enumDemo.A valueOf(java.lang.String);\n  static {};\n}\n~~~\n\n### Api\n1. `name()`：返回枚举常量的名称\n2. `ordinal()`：返回枚举常量的索引，索引从0开始\n\n### 使用场景\n1. 枚举类一般用于信息分类和标志\n2. 枚举类作为形参可以约束传入参数\n\n\n## 抽象类\n[返回目录](#目录)\n### 抽象类和抽象方法\n1. 抽象类：抽象类不能实例化对象，只能被继承\n2. 抽象方法：抽象方法没有方法体，方法体由子类实现\n\n## 接口\n[返回目录](#目录)\n### 基本概念\n`interface` 关键字定义接口\n1. 定义常量，接口中的常量public static final 可以不写，默认是public static final\n2. 定义抽象方法，接口中的抽象方法public abstract 可以不写，默认是public abstract\n3. 接口不能实例化对象\n4. 接口可以被实现类通过`implements`关键字**实现**，一个类只能**继承**一个父类，但可以**实现**多个接口\n5. 实现类必须实现所有接口中的抽象方法，否则必须声明抽象类\n\n### 接口的好处\n1. 解决了单继承的不足，使类的角色更多\n2. 面相接口编程，进一步解耦合\n\n### JDK8 新特性\n1. 默认方法：使用`default`关键字定义，默认被`public`修饰，只能由接口实现类对象调用，实际上是对象（实例）方法\n2. 私有方法：使用`private`关键字定义，只能由接口内部其他实例调用，不能被继承\n3. 静态方法：使用`static`关键字定义，默认被`public`修饰，只能由接口名称调用，实际上是类方法\n\n### 注意事项\n1. 多继承：**接口**可以继承多个**接口**\n2. 多实现：**接口**可以被多个**类**实现\n3. 一个接口继承多个接口时，若存在签名冲突，则不支持多继承和多实现\n4. 一个接口继承多个接口时，若存在同名默认方法，重写该方法可以不冲突\n5. 一个类继承了父类，同时实现了接口，若有同名方法，则父类方法优先\n6. 一个类继承了父类，同时实现了接口，若有同名方法，可通过`接口名.super.接口方法()`调用接口方法\n\n\n## 代码块\n\n[返回目录](#目录)\n\n### 静态代码块\n**格式**：`static{ }`\n**特点**：**类**加载时自动执行，只执行一次\n**作用**：完成**类**的初始化，静态变量的初始化赋值\n\n### 实例代码块\n**格式**：`{ }`\n**特点**：**对象**创建时自动执行，每次创建对象都会执行\n**作用**：完成**对象**的初始化，实例变量的初始化赋值\n\n## 内部类\n\n[返回目录](#目录)\n\n### 基本概念\n当一个类定义在另一个类的内部，这个类就是内部类\n当一个类的内部，包含一个完整的事物，且这个事物没必要单独设计，这个类可以被设计为内部类\n\n### 成员内部类\n1. 定义在外部类内，无`static`修饰，属于**外部类对象持有**的\n2. 创建内部类对象的语法：`外部类名.内部类名 对象名 = new 外部类对象().new 内部类名()`\n3. 成员内部类可以直接访问外部类**静态成员**，也可以访问外部类**实例成员**（成员内部类寄生于外部类对象）\n4. 成员内部类可以通过`外部类名.this`访问外部类对象\n\n### 静态内部类\n1. 定义在外部类内，有`static`修饰，属于**外部类持有**的\n2. 创建内部类对象的语法：`外部类名.内部类名 对象名 = new 外部类名.内部类名()`\n3. 静态内部类可以直接访问外部类**静态成员**，不能访问外部类**实例成员**\n\n### 匿名内部类\n1. 匿名内部类是一种特殊的局部内部类，不需要声明类名，默认有一个隐藏的名称\n2. 匿名内部类本质是一个子类，并且会立即创建一个子类对象，编译后会生成一个 `类名$编号.class` 文件\n~~~java\nnew 类或接口(参数){\n    类体（一般是方法重写）\n}\n~~~\n3. 用于更方便创建子类\n\n## 函数式编程\n\n[返回目录](#目录)\n\n### Lambda 表达式\n1. 语法：`(参数列表) -> {方法体}`\n2. 函数式接口：只有一个抽象方法的接口\n3. 可以简化函数式接口的匿名内部类\n\n### 静态方法引用\n1. 格式：`类名::静态方法名`\n2. 如果一个Lambda表达式里只调用一个静态方法，并且`->`前后的参数的形式一致，则可以使用静态方法引用\n\n### 实例方法引用\n1. 语法：`对象::实例方法名`\n2. 如果一个Lambda表达式里只调用一个实例方法，并且`->`前后的参数的形式一致，则可以使用实例方法引用\n\n### 特定类型方法引用\n1. 语法：`特定类名::实例方法名`\n2. 如果某个Lambda表达式里只是调用一个特定类型的实例方法，并且前面参数列表的第一个参数作为方法的主调，后面所有参数都是作为实例方法的入参，则可以使用特定类型方法引用\n\n~~~java\npublic class Main2 {\n    public static void main(String[] args) {\n        // 需求：一个英文人名数组，按字母升序排序\n        String[] names = {\"Tom\", \"Jerry\", \"Mike\", \"Mary\", \"Smith\", \"Kate\", \"tom\", \"jam\", \"milk\"};\n\n        // 排序\n        Arrays.sort(names);\n        // 忽略首字母大小写\n        Arrays.sort(names, new Comparator<String>() {\n            @Override\n            public int compare(String o1, String o2) {\n                // compareToIgnoreCase(): 忽略大小写\n                return o1.compareToIgnoreCase(o2);\n            }\n        });\n\n        // Lambda 表达式\n        Arrays.sort(names, (o1, o2) -> o1.compareToIgnoreCase(o2));\n\n        // 特定的方法引用：类名::方法名\n        Arrays.sort(names, String::compareToIgnoreCase);\n\n        System.out.println(Arrays.toString(names));\n\n    }\n}\n~~~\n\n### 构造器引用\n1. 语法：`类名::new`\n2. 如果某个Lambda表达式里只是在创建对象，并且`->`前后的参数形式一致，则可以使用构造器引用\n\n~~~java\npublic class Main3 {\n    public static void main(String[] args) {\n        CarFactory factory = new CarFactory() {\n            @Override\n            public Car create(String name) {\n                return new Car(name);\n            }\n        };\n        // Lambda 表达式\n        CarFactory factory2 = (name) -> new Car(name);\n\n        // 构造器引用\n        CarFactory factory3 = Car::new;\n    }\n\n}\n\n@FunctionalInterface\ninterface CarFactory {\n    Car create(String name);\n}\n\n@Data\n@NoArgsConstructor\n@AllArgsConstructor\nclass Car{\n    private String name;\n}\n~~~\n\n## 常用API\n\n[返回目录](#目录)\n\n> [String](#string)\n> [ArrayList](#arraylist)\n\n### String\n#### 创建字符串\n1. **方式一**：`String str = \"hello world\";`\n2. 方式二：调用构造器创建字符串对象\n   1. `String str = new String();` 创建一个空字符串对象\n   2. `String str = new String(\"hello world\");` 创建一个字符串对象\n   3. `String str = new String(char[] value);` 根据字符数组创建一个字符串对象\n   4. `String str = new String(byte[] value);` 根据字节数组创建一个字符串对象\n3. 方式一存放在**常量池**中，且相同的字符串对象只创建一个\n4. 方式二存放在**堆**中，且相同内容可以创建多个对象\n\n#### 处理字符串\n| 方法 | 作用 |\n| --- | --- |\n|`int length()`|获取字符串长度|\n|`boolean equals(Object obj)`|字符串内容比较（`==`比较的是字符串地址！）|\n|`char charAt(int index)`|获取索引处的字符|\n|`char[] toCharArray()`|转换成字符数组|\n|`boolean equalsIgnoreCase(String str)`|判断字符串内容是否一致，忽略大小写|\n|`String substring(int beginIndex, int endIndex)`|根据索引截取字符串|\n|`String substring(int beginIndex)`|从索引处截取字符串|\n|`String replace(CharSequence oldChar, CharSequence newChar)`|新值替换旧值|\n|`boolean contains(CharSequence s)`|判断字符串中是否包含子串|\n|`boolean startsWith(String prefix)`|判断字符串是否以指定字符开头|\n|`String[] split(String regex)`|将字符串按某个字符分割为字符串数组|\n\n### ArrayList\n| 方法 | 作用 |\n| --- | --- |\n|`ArrayList<E>()`|创建一个空的集合对象，E为集合中元素的数据类型，可不指定|\n|`boolean add(E e)`|添加元素到集合末尾|\n|`void add(int index, E element)`|在指定索引处添加元素|\n|`E get(int index)`|获取指定索引处的元素|\n|`int size()`|获取集合大小|\n|`E remove(int index)`|删除指定索引处的元素，返回删除的元素|\n|`boolean remove(Object o)`|删除指定元素，返回是否删除成功|\n|`E set(int index, E element)`|修改指定索引处的元素，返回修改前的元素|\n\n\n\n## *GUI编程\n> 目前项目开发几乎不使用Java来开发GUI界面，仅了解\n\n[返回目录](#目录)\n\n### 常见的Swing组件\n|组件|作用|\n| --- | --- |\n|[JFrame](#jframe)|窗口|\n|[JPanel](#jpanel)|面板，用于组织其他组件的容器|\n|[JButton](#jbutton)|按钮|\n|JTextField|文本输入框|\n|JTable|表格|\n\n### JFrame\n|API|作用|value|\n| --- | --- | --- |\n|`void setSize(int width, int height)`|设置窗口大小|\n|`void setLocationRelativeTo(Component c)`|设置窗口位置|\n|`void setDefaultCloseOperation(int operation)`|设置关闭方式|`JFrame.EXIT_ON_CLOSE` 关闭窗口时退出程序|\n|`void setVisible(boolean b)`|设置窗口是否可见|\n|`void add(Component c)`|添加组件|\n\n### JPanel\n[back to GUI编程](#gui编程)\n|API|作用|value|\n| --- | --- | --- |\n|`void add(Component c)`|添加组件|\n\n### JButton\n[back to GUI编程](#gui编程)\n|API|作用|value|\n| --- | --- | --- |\n|`void setText(String text)`|设置按钮文本|\n\n### Layout Manager\n[back to GUI编程](#gui编程)\n|Layout Manager|作用|\n| --- | --- |\n|`BorderLayout`|边界布局，将容器分成5个区域，North、South、East、West、Center，每个区域只有一个组件|\n|`FlowLayout`|流式布局，组件排满一行自动换行|\n|`GridLayout`|网格布局，组件会自动填充|\n|`GridBagLayout`|网格布局，组件会自动填充|\n\n\n\n\n\n\n\n\n\n","slug":"JavaTips","published":1,"updated":"2025-09-06T12:29:21.188Z","_id":"cmf88q0440000c4tlhzl9avjf","comments":1,"layout":"post","photos":[],"content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><html><head></head><body><h1><span id=\"java%E7%9F%A5%E8%AF%86%E7%82%B9\">Java知识点</span></h1><hr>\n<h2><span id=\"%E7%9B%AE%E5%BD%95\">目录</span></h2><blockquote>\n<p><a href=\"#%E9%9D%99%E6%80%81%E5%8F%98%E9%87%8F%E9%9D%99%E6%80%81%E6%96%B9%E6%B3%95\">静态变量、静态方法</a><br><a href=\"#%E7%BB%A7%E6%89%BF\">继承</a><br><a href=\"#%E5%A4%9A%E6%80%81\">多态</a><br><a href=\"#final-%E5%85%B3%E9%94%AE%E5%AD%97\">final关键字</a><br><a href=\"#%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F\">设计模式</a><br><a href=\"#%E6%9E%9A%E4%B8%BE%E7%B1%BB\">枚举类</a><br><a href=\"#%E6%8A%BD%E8%B1%A1%E7%B1%BB\">抽象类</a><br><a href=\"#%E6%8E%A5%E5%8F%A3\">接口</a><br><a href=\"#%E4%BB%A3%E7%A0%81%E5%9D%97\">代码块</a><br><a href=\"#%E5%86%85%E9%83%A8%E7%B1%BB\">内部类</a><br><a href=\"#%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B\">函数式编程</a><br><a href=\"#%E5%B8%B8%E7%94%A8api\">常用API</a><br><a href=\"#gui%E7%BC%96%E7%A8%8B\">GUI编程</a></p>\n</blockquote>\n<hr>\n<h2><span id=\"%E9%9D%99%E6%80%81%E5%8F%98%E9%87%8F%E9%9D%99%E6%80%81%E6%96%B9%E6%B3%95\">静态变量、静态方法</span></h2><p><a href=\"#%E7%9B%AE%E5%BD%95\">返回目录</a></p>\n<h3><span id=\"%E5%AE%9A%E4%B9%89\">定义</span></h3><ol>\n<li><strong>静态变量（类变量）</strong>：属于类，只加载一份，可以被类和类的全部对象访问</li>\n<li><strong>实例变量（对象变量）</strong>：属于对象，每个对象有自己一份</li>\n<li><strong>静态方法（类方法）</strong>：属于类，只能访问静态变量，不能访问实例变量</li>\n<li><strong>实例方法（对象方法）</strong>：属于对象</li>\n</ol>\n<h3><span id=\"%E5%BA%94%E7%94%A8\">应用</span></h3><ol>\n<li><strong>静态变量</strong>的应用实例: 记录对象的创建数量</li>\n<li><strong>静态方法</strong>应用实例：对于只需要完成某个功能，而不需要直接访问对象的数据的方法，可以使用静态方法<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Student</span> {<br>    <span class=\"hljs-comment\">// 静态变量（类变量）：属于类，只加载一份，可以被类和类的全部对象访问</span><br>    <span class=\"hljs-keyword\">static</span> String schoolName;<br>    <span class=\"hljs-comment\">// 实例变量（对象变量）：属于对象，每个对象有自己一份</span><br>    String name;<br>    <span class=\"hljs-comment\">// 静态变量的应用实例: 记录对象的创建数量</span><br>    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">Integer</span> <span class=\"hljs-variable\">count</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span> ;<br><br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">Student</span><span class=\"hljs-params\">(String name)</span>{<br>        <span class=\"hljs-built_in\">this</span>.name = name;<br>        <span class=\"hljs-comment\">// 同一个类中，访问静态变量，类名可以不写</span><br>        count++;<br>    }<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">Student</span><span class=\"hljs-params\">()</span>{<br>        count++;<br>    }<br><br>    <span class=\"hljs-comment\">// 静态方法（类方法）：属于类，只能访问静态变量，不能访问实例变量</span><br>    <span class=\"hljs-comment\">// 静态方法应用实例：对于只需要完成某个功能，而不需要直接访问对象的数据的方法，可以使用静态方法</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">printHelloWorld</span><span class=\"hljs-params\">()</span>{<br>        System.out.println(<span class=\"hljs-string\">\"Hello World\"</span>);<br>    }<br><br>    <span class=\"hljs-comment\">// 实例方法（对象方法）：属于对象</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">printName</span><span class=\"hljs-params\">()</span>{<br>        System.out.println(name);<br>    }<br><br>}<br></code></pre></td></tr></tbody></table></figure></li>\n</ol>\n<h3><span id=\"%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9\">注意事项</span></h3><ol>\n<li><strong>静态方法</strong>可以直接访问<strong>静态变量</strong>，不能直接访问<strong>实例变量</strong></li>\n<li><strong>实例方法</strong>既可以直接访问<strong>静态变量</strong>，也可以直接访问<strong>实例变量</strong></li>\n<li><strong>静态方法</strong>不能使用<code>this</code>关键字（不属于对象，自然不可以用<code>this</code>）</li>\n</ol>\n<h3><span id=\"%E8%AE%BF%E9%97%AE%E6%96%B9%E5%BC%8F\">访问方式</span></h3><ol>\n<li><strong>静态变量</strong>访问方式：<strong>类名</strong>.静态成员变量名<font color=\"red\">（推荐方式）</font></li>\n<li><strong>静态变量</strong>访问方式：<strong>对象名</strong>.静态成员变量名（不推荐）</li>\n<li><strong>静态方法</strong>访问方式：<strong>类名</strong>.静态方法名</li>\n</ol>\n<h2><span id=\"%E7%BB%A7%E6%89%BF\">继承</span></h2><p><a href=\"#%E7%9B%AE%E5%BD%95\">返回目录</a></p>\n<h3><span id=\"%E5%AD%90%E7%B1%BB%E6%9E%84%E9%80%A0%E5%99%A8%E7%9A%84%E7%89%B9%E7%82%B9\">子类构造器的特点</span></h3><ol>\n<li>子类的全部构造器，都会先调用父类的构造器，再调用自己的构造器</li>\n<li>默认情况下，子类构造器的第一行都是<code>super();</code>(<strong>写不写都有</strong>)调用父类构造器，可自行指定有参还是无参</li>\n</ol>\n<h3><span id=\"%E5%85%84%E5%BC%9F%E6%9E%84%E9%80%A0%E5%99%A8\">兄弟构造器</span></h3><ol>\n<li>构造器中可以使用<code>this(参数);</code>调用兄弟构造器，可用于为某个参数赋予默认值</li>\n<li><code>super();</code>和<code>this();</code>必须写在构造器的<strong>第一行</strong>，并且<strong>不能同时使用</strong></li>\n</ol>\n<h2><span id=\"%E5%A4%9A%E6%80%81\">多态</span></h2><p><a href=\"#%E7%9B%AE%E5%BD%95\">返回目录</a></p>\n<h3><span id=\"%E8%AE%A4%E8%AF%86%E5%A4%9A%E6%80%81\">认识多态</span></h3><ol>\n<li>多态是在<strong>继承/实现</strong>情况下的一种现象，表现为<strong>对象多态、行为多态</strong><figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">main</span> {<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {<br>        <span class=\"hljs-comment\">// 对象多态</span><br>        <span class=\"hljs-type\">Animal</span> <span class=\"hljs-variable\">wolf</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Wolf</span>();<br>        <span class=\"hljs-type\">Animal</span> <span class=\"hljs-variable\">dog</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Dog</span>();<br><br>        <span class=\"hljs-comment\">// 行为多态</span><br>        wolf.run();<br>        System.out.println(wolf.name);<br>        dog.run();<br>        System.out.println(dog.name);<br><br>        <span class=\"hljs-comment\">// 多态的好处2：定义方法时，使用父类的形参，可以接收一切子类对象，拓展性强</span><br>        goRun(wolf);<br>        goRun(dog);<br><br>        <span class=\"hljs-comment\">// 强制类型转换，解决多态下无法调用子类独有方法的问题</span><br>        <span class=\"hljs-comment\">// 注意：对象的真实类型与强制转换的类型不同，会导致ClassCastException异常</span><br>        <span class=\"hljs-type\">Wolf</span> <span class=\"hljs-variable\">newWolf</span> <span class=\"hljs-operator\">=</span> (Wolf)wolf;<br>        <span class=\"hljs-type\">Dog</span> <span class=\"hljs-variable\">newDog</span> <span class=\"hljs-operator\">=</span> (Dog)dog;<br>        newWolf.howl();<br>        newDog.bark();<br><br>        <span class=\"hljs-comment\">// instanceof 判断对象是否是某个类的实例</span><br>        <span class=\"hljs-keyword\">if</span>(wolf <span class=\"hljs-keyword\">instanceof</span> Dog){<br>            <span class=\"hljs-type\">Dog</span> <span class=\"hljs-variable\">newNewDog</span> <span class=\"hljs-operator\">=</span> (Dog)wolf;<br>        } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(wolf <span class=\"hljs-keyword\">instanceof</span> Wolf){<br>            <span class=\"hljs-type\">Wolf</span> <span class=\"hljs-variable\">newNewWolf</span> <span class=\"hljs-operator\">=</span> (Wolf)wolf;<br>        }<br><br>    }<br><br>    <span class=\"hljs-comment\">// 多态的好处2：定义方法时，使用父类的形参，可以接收一切子类对象，拓展性强</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">goRun</span><span class=\"hljs-params\">(Animal animal)</span>{<br>        animal.run();<br>    }<br>}<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Animal</span> {<br>    <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">name</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">\"animal\"</span>;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">run</span><span class=\"hljs-params\">()</span>{<br>        System.out.println(<span class=\"hljs-string\">\"running\"</span>);<br>    }<br>}<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Dog</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">Animal</span>{<br>    <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">name</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">\"Dog\"</span>;<br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">run</span><span class=\"hljs-params\">()</span><br>    {<br>        System.out.println(<span class=\"hljs-string\">\"Dog is running\"</span>);<br>    }<br><br>    <span class=\"hljs-comment\">// 多态无法调用子类独有的方法</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">bark</span><span class=\"hljs-params\">()</span><br>    {<br>        System.out.println(<span class=\"hljs-string\">\"Dog is barking\"</span>);<br>    }<br>}<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Wolf</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">Animal</span>{<br>    <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">name</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">\"Wolf\"</span>;<br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">run</span><span class=\"hljs-params\">()</span><br>    {<br>        System.out.println(<span class=\"hljs-string\">\"Wolf is running\"</span>);<br>    }<br><br>    <span class=\"hljs-comment\">// 多态无法调用子类独有的方法</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">howl</span><span class=\"hljs-params\">()</span><br>    {<br>        System.out.println(<span class=\"hljs-string\">\"Wolf is howling\"</span>);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure></li>\n<li><code>run()</code>方法：编译看左<code>Animal</code>，运行看右<code>Dog/Wolf</code></li>\n<li><code>name</code>属性：编译看左<code>Animal</code>，运行看也左<code>Animal</code></li>\n</ol>\n<h3><span id=\"%E5%A4%9A%E6%80%81%E7%9A%84%E7%89%B9%E6%80%A7\">多态的特性</span></h3><ol>\n<li>多态模式下，右边的对象是解耦合的，便于拓展和维护</li>\n<li>定义方法时，使用父类的形参，可以接收一切子类对象，拓展性强</li>\n<li>多态模式下，无法调用子类独有的方法</li>\n<li>多态模式下，强制类型转换成子类对象，此时可以调用子类独有的方法</li>\n<li>对象的真实类型与强制转换的类型不同，会导致<code>ClassCastException</code>异常</li>\n<li><code>instanceof</code> 判断对象是否是某个类的实例，强制类型转换之前可以检查是否是某个类的实例</li>\n</ol>\n<h2><span id=\"final-%E5%85%B3%E9%94%AE%E5%AD%97\">final 关键字</span></h2><p><a href=\"#%E7%9B%AE%E5%BD%95\">返回目录</a></p>\n<h3><span id=\"%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5\">基本概念</span></h3><ol>\n<li><code>final</code> 关键字修饰类：表示该类不能被继承，称为<strong>最终类</strong></li>\n<li><code>final</code> 关键字修饰方法：表示该方法不能被重写，称为<strong>最终方法</strong></li>\n<li><code>final</code> 关键字修饰变量：表示该变量有且仅能赋值一次</li>\n</ol>\n<h3><span id=\"%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF\">使用场景</span></h3><ol>\n<li>使用<code>final</code>修饰<strong>静态变量</strong>，可以声明一个<strong>常量</strong>，通常作为系统配置信息，不再修改(常量通常全大写，多个单词用下划线连接，如<code>MAX_SIZE</code>)</li>\n<li>使用<code>final</code>修饰<strong>基本变量</strong>，变量储存的<strong>数据</strong>不能改变</li>\n<li>使用<code>final</code>修饰<strong>引用变量</strong>(类对象、数组对象)，变量存储的<strong>地址</strong>不能改变，但对象内部数据可以改变</li>\n</ol>\n<h2><span id=\"%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F\">设计模式</span></h2><p><a href=\"#%E7%9B%AE%E5%BD%95\">返回目录</a></p>\n<h3><span id=\"%E5%8D%95%E4%BE%8B%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F\">单例设计模式</span></h3><h4><span id=\"%E4%BD%9C%E7%94%A8\">作用</span></h4><p>确保某个类只创建一个对象</p>\n<h4><span id=\"%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F\">实现方式</span></h4><h5><span id=\"%E9%A5%BF%E6%B1%89%E5%BC%8F%E5%8D%95%E4%BE%8B%E2%80%93%E7%94%A8%E5%AF%B9%E8%B1%A1%E4%B9%8B%E5%89%8D%E5%B7%B2%E5%88%9B%E5%BB%BA%E5%AE%8C%E6%AF%95\">饿汉式单例–用对象之前已创建完毕</span></h5><ol>\n<li>将类的构造器私有</li>\n<li>定义一个类变量记住一个对象</li>\n<li>定义一个类方法获取对象</li>\n</ol>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// 饿汉式单例</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">A</span> {<br>    <span class=\"hljs-comment\">// 1. 私有化构造器：确保单例类对外不能创建对象</span><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-title function_\">A</span><span class=\"hljs-params\">()</span>{<br>    }<br><br>    <span class=\"hljs-comment\">// 2. 创建静态成员变量记住唯一的一个实例</span><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">A</span> <span class=\"hljs-variable\">a</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">A</span>();<br><br>    <span class=\"hljs-comment\">// 3. 创建静态方法，返回唯一实例</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> A <span class=\"hljs-title function_\">getInstance</span><span class=\"hljs-params\">()</span>{<br>        <span class=\"hljs-keyword\">return</span> a;<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure>\n\n<h5><span id=\"%E6%87%92%E6%B1%89%E5%BC%8F%E5%8D%95%E4%BE%8B%E2%80%93%E7%94%A8%E5%AF%B9%E8%B1%A1%E6%97%B6%E6%89%8D%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1\">懒汉式单例–用对象时才创建对象</span></h5><figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// 懒汉式单例</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">B</span> {<br>    <span class=\"hljs-comment\">// 私有化构造器</span><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-title function_\">B</span><span class=\"hljs-params\">()</span>{}<br><br>    <span class=\"hljs-comment\">// 静态变量记住唯一实例</span><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> B b;<br><br>    <span class=\"hljs-comment\">// 静态方法获取唯一实例</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> B <span class=\"hljs-title function_\">getInstance</span><span class=\"hljs-params\">()</span>{<br>        <span class=\"hljs-keyword\">if</span>(b == <span class=\"hljs-literal\">null</span>){<br>            b = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">B</span>();<br>        }<br>        <span class=\"hljs-keyword\">return</span> b;<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure>\n\n<hr>\n<h3><span id=\"%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F\">模板方法设计模式</span></h3><h4><span id=\"%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5\">基本概念</span></h4><p>提供一个方法作为完成某类功能的模板，模板方法封装了每个实现步骤，但允许子类提供特定步骤的实现</p>\n<h4><span id=\"%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F\">实现方式</span></h4><ol>\n<li>定义模板方法，把共同实现步骤放进去</li>\n<li>定义抽象方法，交给具体的子类完成</li>\n<li>建议使用<code>final</code>修饰模板方法，防止被重写</li>\n</ol>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">abstract</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">People</span> {<br>    <span class=\"hljs-comment\">// 模板方法设计模式</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">write</span><span class=\"hljs-params\">()</span>{<br>        System.out.println(<span class=\"hljs-string\">\"重复部分代码\"</span>);<br>        <span class=\"hljs-comment\">// 模板方法知道子类一定要重写的部分</span><br>        <span class=\"hljs-comment\">// 使用抽象方法来实现重写部分</span><br>        writeMain();<br><br>        System.out.println(<span class=\"hljs-string\">\"重复部分代码\"</span>);<br>    }<br><br>    <span class=\"hljs-comment\">// 定义一个抽象方法，子类必须实现</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">abstract</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">writeMain</span><span class=\"hljs-params\">()</span>;<br>}<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Student</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">People</span>{<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">writeMain</span><span class=\"hljs-params\">()</span> {<br>        System.out.println(<span class=\"hljs-string\">\"学生写代码\"</span>);<br>    }<br>}<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Teacher</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">People</span>{<br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">writeMain</span><span class=\"hljs-params\">()</span> {<br>        System.out.println(<span class=\"hljs-string\">\"老师写代码\"</span>);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure>\n\n<h2><span id=\"%E6%9E%9A%E4%B8%BE%E7%B1%BB\">枚举类</span></h2><p><a href=\"#%E7%9B%AE%E5%BD%95\">返回目录</a></p>\n<h3><span id=\"%E7%89%B9%E7%82%B9\">特点</span></h3><ol>\n<li>枚举类都是最终类，不能被继承，都继承自<code>java.lang.Enum</code></li>\n<li>枚举类第一行只能罗列一些名称，这些名称是常量，每个常量会记住枚举类的一个对象</li>\n<li>枚举类的构造器都是私有的，不能对外创建对象<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// 反编译后的枚举类结构</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">com</span>.kei.enumDemo.A <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">java</span>.lang.Enum&lt;com.kei.enumDemo.A&gt; {<br>  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> com.kei.enumDemo.A X;<br>  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> com.kei.enumDemo.A Y;<br>  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> com.kei.enumDemo.A Z;<br>  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> com.kei.enumDemo.A[] values();<br>  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> com.kei.enumDemo.A <span class=\"hljs-title function_\">valueOf</span><span class=\"hljs-params\">(java.lang.String)</span>;<br>  <span class=\"hljs-keyword\">static</span> {};<br>}<br></code></pre></td></tr></tbody></table></figure></li>\n</ol>\n<h3><span id=\"api\">Api</span></h3><ol>\n<li><code>name()</code>：返回枚举常量的名称</li>\n<li><code>ordinal()</code>：返回枚举常量的索引，索引从0开始</li>\n</ol>\n<h3><span id=\"%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF\">使用场景</span></h3><ol>\n<li>枚举类一般用于信息分类和标志</li>\n<li>枚举类作为形参可以约束传入参数</li>\n</ol>\n<h2><span id=\"%E6%8A%BD%E8%B1%A1%E7%B1%BB\">抽象类</span></h2><p><a href=\"#%E7%9B%AE%E5%BD%95\">返回目录</a></p>\n<h3><span id=\"%E6%8A%BD%E8%B1%A1%E7%B1%BB%E5%92%8C%E6%8A%BD%E8%B1%A1%E6%96%B9%E6%B3%95\">抽象类和抽象方法</span></h3><ol>\n<li>抽象类：抽象类不能实例化对象，只能被继承</li>\n<li>抽象方法：抽象方法没有方法体，方法体由子类实现</li>\n</ol>\n<h2><span id=\"%E6%8E%A5%E5%8F%A3\">接口</span></h2><p><a href=\"#%E7%9B%AE%E5%BD%95\">返回目录</a></p>\n<h3><span id=\"%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5\">基本概念</span></h3><p><code>interface</code> 关键字定义接口</p>\n<ol>\n<li>定义常量，接口中的常量public static final 可以不写，默认是public static final</li>\n<li>定义抽象方法，接口中的抽象方法public abstract 可以不写，默认是public abstract</li>\n<li>接口不能实例化对象</li>\n<li>接口可以被实现类通过<code>implements</code>关键字<strong>实现</strong>，一个类只能<strong>继承</strong>一个父类，但可以<strong>实现</strong>多个接口</li>\n<li>实现类必须实现所有接口中的抽象方法，否则必须声明抽象类</li>\n</ol>\n<h3><span id=\"%E6%8E%A5%E5%8F%A3%E7%9A%84%E5%A5%BD%E5%A4%84\">接口的好处</span></h3><ol>\n<li>解决了单继承的不足，使类的角色更多</li>\n<li>面相接口编程，进一步解耦合</li>\n</ol>\n<h3><span id=\"jdk8-%E6%96%B0%E7%89%B9%E6%80%A7\">JDK8 新特性</span></h3><ol>\n<li>默认方法：使用<code>default</code>关键字定义，默认被<code>public</code>修饰，只能由接口实现类对象调用，实际上是对象（实例）方法</li>\n<li>私有方法：使用<code>private</code>关键字定义，只能由接口内部其他实例调用，不能被继承</li>\n<li>静态方法：使用<code>static</code>关键字定义，默认被<code>public</code>修饰，只能由接口名称调用，实际上是类方法</li>\n</ol>\n<h3><span id=\"%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9\">注意事项</span></h3><ol>\n<li>多继承：<strong>接口</strong>可以继承多个<strong>接口</strong></li>\n<li>多实现：<strong>接口</strong>可以被多个<strong>类</strong>实现</li>\n<li>一个接口继承多个接口时，若存在签名冲突，则不支持多继承和多实现</li>\n<li>一个接口继承多个接口时，若存在同名默认方法，重写该方法可以不冲突</li>\n<li>一个类继承了父类，同时实现了接口，若有同名方法，则父类方法优先</li>\n<li>一个类继承了父类，同时实现了接口，若有同名方法，可通过<code>接口名.super.接口方法()</code>调用接口方法</li>\n</ol>\n<h2><span id=\"%E4%BB%A3%E7%A0%81%E5%9D%97\">代码块</span></h2><p><a href=\"#%E7%9B%AE%E5%BD%95\">返回目录</a></p>\n<h3><span id=\"%E9%9D%99%E6%80%81%E4%BB%A3%E7%A0%81%E5%9D%97\">静态代码块</span></h3><p><strong>格式</strong>：<code>static{ }</code><br><strong>特点</strong>：<strong>类</strong>加载时自动执行，只执行一次<br><strong>作用</strong>：完成<strong>类</strong>的初始化，静态变量的初始化赋值</p>\n<h3><span id=\"%E5%AE%9E%E4%BE%8B%E4%BB%A3%E7%A0%81%E5%9D%97\">实例代码块</span></h3><p><strong>格式</strong>：<code>{ }</code><br><strong>特点</strong>：<strong>对象</strong>创建时自动执行，每次创建对象都会执行<br><strong>作用</strong>：完成<strong>对象</strong>的初始化，实例变量的初始化赋值</p>\n<h2><span id=\"%E5%86%85%E9%83%A8%E7%B1%BB\">内部类</span></h2><p><a href=\"#%E7%9B%AE%E5%BD%95\">返回目录</a></p>\n<h3><span id=\"%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5\">基本概念</span></h3><p>当一个类定义在另一个类的内部，这个类就是内部类<br>当一个类的内部，包含一个完整的事物，且这个事物没必要单独设计，这个类可以被设计为内部类</p>\n<h3><span id=\"%E6%88%90%E5%91%98%E5%86%85%E9%83%A8%E7%B1%BB\">成员内部类</span></h3><ol>\n<li>定义在外部类内，无<code>static</code>修饰，属于<strong>外部类对象持有</strong>的</li>\n<li>创建内部类对象的语法：<code>外部类名.内部类名 对象名 = new 外部类对象().new 内部类名()</code></li>\n<li>成员内部类可以直接访问外部类<strong>静态成员</strong>，也可以访问外部类<strong>实例成员</strong>（成员内部类寄生于外部类对象）</li>\n<li>成员内部类可以通过<code>外部类名.this</code>访问外部类对象</li>\n</ol>\n<h3><span id=\"%E9%9D%99%E6%80%81%E5%86%85%E9%83%A8%E7%B1%BB\">静态内部类</span></h3><ol>\n<li>定义在外部类内，有<code>static</code>修饰，属于<strong>外部类持有</strong>的</li>\n<li>创建内部类对象的语法：<code>外部类名.内部类名 对象名 = new 外部类名.内部类名()</code></li>\n<li>静态内部类可以直接访问外部类<strong>静态成员</strong>，不能访问外部类<strong>实例成员</strong></li>\n</ol>\n<h3><span id=\"%E5%8C%BF%E5%90%8D%E5%86%85%E9%83%A8%E7%B1%BB\">匿名内部类</span></h3><ol>\n<li>匿名内部类是一种特殊的局部内部类，不需要声明类名，默认有一个隐藏的名称</li>\n<li>匿名内部类本质是一个子类，并且会立即创建一个子类对象，编译后会生成一个 <code>类名$编号.class</code> 文件<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">new</span> 类或接口(参数){<br>    类体（一般是方法重写）<br>}<br></code></pre></td></tr></tbody></table></figure></li>\n<li>用于更方便创建子类</li>\n</ol>\n<h2><span id=\"%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B\">函数式编程</span></h2><p><a href=\"#%E7%9B%AE%E5%BD%95\">返回目录</a></p>\n<h3><span id=\"lambda-%E8%A1%A8%E8%BE%BE%E5%BC%8F\">Lambda 表达式</span></h3><ol>\n<li>语法：<code>(参数列表) -&gt; {方法体}</code></li>\n<li>函数式接口：只有一个抽象方法的接口</li>\n<li>可以简化函数式接口的匿名内部类</li>\n</ol>\n<h3><span id=\"%E9%9D%99%E6%80%81%E6%96%B9%E6%B3%95%E5%BC%95%E7%94%A8\">静态方法引用</span></h3><ol>\n<li>格式：<code>类名::静态方法名</code></li>\n<li>如果一个Lambda表达式里只调用一个静态方法，并且<code>-&gt;</code>前后的参数的形式一致，则可以使用静态方法引用</li>\n</ol>\n<h3><span id=\"%E5%AE%9E%E4%BE%8B%E6%96%B9%E6%B3%95%E5%BC%95%E7%94%A8\">实例方法引用</span></h3><ol>\n<li>语法：<code>对象::实例方法名</code></li>\n<li>如果一个Lambda表达式里只调用一个实例方法，并且<code>-&gt;</code>前后的参数的形式一致，则可以使用实例方法引用</li>\n</ol>\n<h3><span id=\"%E7%89%B9%E5%AE%9A%E7%B1%BB%E5%9E%8B%E6%96%B9%E6%B3%95%E5%BC%95%E7%94%A8\">特定类型方法引用</span></h3><ol>\n<li>语法：<code>特定类名::实例方法名</code></li>\n<li>如果某个Lambda表达式里只是调用一个特定类型的实例方法，并且前面参数列表的第一个参数作为方法的主调，后面所有参数都是作为实例方法的入参，则可以使用特定类型方法引用</li>\n</ol>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Main2</span> {<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {<br>        <span class=\"hljs-comment\">// 需求：一个英文人名数组，按字母升序排序</span><br>        String[] names = {<span class=\"hljs-string\">\"Tom\"</span>, <span class=\"hljs-string\">\"Jerry\"</span>, <span class=\"hljs-string\">\"Mike\"</span>, <span class=\"hljs-string\">\"Mary\"</span>, <span class=\"hljs-string\">\"Smith\"</span>, <span class=\"hljs-string\">\"Kate\"</span>, <span class=\"hljs-string\">\"tom\"</span>, <span class=\"hljs-string\">\"jam\"</span>, <span class=\"hljs-string\">\"milk\"</span>};<br><br>        <span class=\"hljs-comment\">// 排序</span><br>        Arrays.sort(names);<br>        <span class=\"hljs-comment\">// 忽略首字母大小写</span><br>        Arrays.sort(names, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Comparator</span>&lt;String&gt;() {<br>            <span class=\"hljs-meta\">@Override</span><br>            <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">compare</span><span class=\"hljs-params\">(String o1, String o2)</span> {<br>                <span class=\"hljs-comment\">// compareToIgnoreCase(): 忽略大小写</span><br>                <span class=\"hljs-keyword\">return</span> o1.compareToIgnoreCase(o2);<br>            }<br>        });<br><br>        <span class=\"hljs-comment\">// Lambda 表达式</span><br>        Arrays.sort(names, (o1, o2) -&gt; o1.compareToIgnoreCase(o2));<br><br>        <span class=\"hljs-comment\">// 特定的方法引用：类名::方法名</span><br>        Arrays.sort(names, String::compareToIgnoreCase);<br><br>        System.out.println(Arrays.toString(names));<br><br>    }<br>}<br></code></pre></td></tr></tbody></table></figure>\n\n<h3><span id=\"%E6%9E%84%E9%80%A0%E5%99%A8%E5%BC%95%E7%94%A8\">构造器引用</span></h3><ol>\n<li>语法：<code>类名::new</code></li>\n<li>如果某个Lambda表达式里只是在创建对象，并且<code>-&gt;</code>前后的参数形式一致，则可以使用构造器引用</li>\n</ol>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Main3</span> {<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {<br>        <span class=\"hljs-type\">CarFactory</span> <span class=\"hljs-variable\">factory</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">CarFactory</span>() {<br>            <span class=\"hljs-meta\">@Override</span><br>            <span class=\"hljs-keyword\">public</span> Car <span class=\"hljs-title function_\">create</span><span class=\"hljs-params\">(String name)</span> {<br>                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Car</span>(name);<br>            }<br>        };<br>        <span class=\"hljs-comment\">// Lambda 表达式</span><br>        <span class=\"hljs-type\">CarFactory</span> <span class=\"hljs-variable\">factory2</span> <span class=\"hljs-operator\">=</span> (name) -&gt; <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Car</span>(name);<br><br>        <span class=\"hljs-comment\">// 构造器引用</span><br>        <span class=\"hljs-type\">CarFactory</span> <span class=\"hljs-variable\">factory3</span> <span class=\"hljs-operator\">=</span> Car::<span class=\"hljs-keyword\">new</span>;<br>    }<br><br>}<br><br><span class=\"hljs-meta\">@FunctionalInterface</span><br><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">CarFactory</span> {<br>    Car <span class=\"hljs-title function_\">create</span><span class=\"hljs-params\">(String name)</span>;<br>}<br><br><span class=\"hljs-meta\">@Data</span><br><span class=\"hljs-meta\">@NoArgsConstructor</span><br><span class=\"hljs-meta\">@AllArgsConstructor</span><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Car</span>{<br>    <span class=\"hljs-keyword\">private</span> String name;<br>}<br></code></pre></td></tr></tbody></table></figure>\n\n<h2><span id=\"%E5%B8%B8%E7%94%A8api\">常用API</span></h2><p><a href=\"#%E7%9B%AE%E5%BD%95\">返回目录</a></p>\n<blockquote>\n<p><a href=\"#string\">String</a><br><a href=\"#arraylist\">ArrayList</a></p>\n</blockquote>\n<h3><span id=\"string\">String</span></h3><h4><span id=\"%E5%88%9B%E5%BB%BA%E5%AD%97%E7%AC%A6%E4%B8%B2\">创建字符串</span></h4><ol>\n<li><strong>方式一</strong>：<code>String str = \"hello world\";</code></li>\n<li>方式二：调用构造器创建字符串对象<ol>\n<li><code>String str = new String();</code> 创建一个空字符串对象</li>\n<li><code>String str = new String(\"hello world\");</code> 创建一个字符串对象</li>\n<li><code>String str = new String(char[] value);</code> 根据字符数组创建一个字符串对象</li>\n<li><code>String str = new String(byte[] value);</code> 根据字节数组创建一个字符串对象</li>\n</ol>\n</li>\n<li>方式一存放在<strong>常量池</strong>中，且相同的字符串对象只创建一个</li>\n<li>方式二存放在<strong>堆</strong>中，且相同内容可以创建多个对象</li>\n</ol>\n<h4><span id=\"%E5%A4%84%E7%90%86%E5%AD%97%E7%AC%A6%E4%B8%B2\">处理字符串</span></h4><table>\n<thead>\n<tr>\n<th>方法</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>int length()</code></td>\n<td>获取字符串长度</td>\n</tr>\n<tr>\n<td><code>boolean equals(Object obj)</code></td>\n<td>字符串内容比较（<code>==</code>比较的是字符串地址！）</td>\n</tr>\n<tr>\n<td><code>char charAt(int index)</code></td>\n<td>获取索引处的字符</td>\n</tr>\n<tr>\n<td><code>char[] toCharArray()</code></td>\n<td>转换成字符数组</td>\n</tr>\n<tr>\n<td><code>boolean equalsIgnoreCase(String str)</code></td>\n<td>判断字符串内容是否一致，忽略大小写</td>\n</tr>\n<tr>\n<td><code>String substring(int beginIndex, int endIndex)</code></td>\n<td>根据索引截取字符串</td>\n</tr>\n<tr>\n<td><code>String substring(int beginIndex)</code></td>\n<td>从索引处截取字符串</td>\n</tr>\n<tr>\n<td><code>String replace(CharSequence oldChar, CharSequence newChar)</code></td>\n<td>新值替换旧值</td>\n</tr>\n<tr>\n<td><code>boolean contains(CharSequence s)</code></td>\n<td>判断字符串中是否包含子串</td>\n</tr>\n<tr>\n<td><code>boolean startsWith(String prefix)</code></td>\n<td>判断字符串是否以指定字符开头</td>\n</tr>\n<tr>\n<td><code>String[] split(String regex)</code></td>\n<td>将字符串按某个字符分割为字符串数组</td>\n</tr>\n</tbody></table>\n<h3><span id=\"arraylist\">ArrayList</span></h3><table>\n<thead>\n<tr>\n<th>方法</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>ArrayList&lt;E&gt;()</code></td>\n<td>创建一个空的集合对象，E为集合中元素的数据类型，可不指定</td>\n</tr>\n<tr>\n<td><code>boolean add(E e)</code></td>\n<td>添加元素到集合末尾</td>\n</tr>\n<tr>\n<td><code>void add(int index, E element)</code></td>\n<td>在指定索引处添加元素</td>\n</tr>\n<tr>\n<td><code>E get(int index)</code></td>\n<td>获取指定索引处的元素</td>\n</tr>\n<tr>\n<td><code>int size()</code></td>\n<td>获取集合大小</td>\n</tr>\n<tr>\n<td><code>E remove(int index)</code></td>\n<td>删除指定索引处的元素，返回删除的元素</td>\n</tr>\n<tr>\n<td><code>boolean remove(Object o)</code></td>\n<td>删除指定元素，返回是否删除成功</td>\n</tr>\n<tr>\n<td><code>E set(int index, E element)</code></td>\n<td>修改指定索引处的元素，返回修改前的元素</td>\n</tr>\n</tbody></table>\n<h2><span id=\"gui%E7%BC%96%E7%A8%8B\">*GUI编程</span></h2><blockquote>\n<p>目前项目开发几乎不使用Java来开发GUI界面，仅了解</p>\n</blockquote>\n<p><a href=\"#%E7%9B%AE%E5%BD%95\">返回目录</a></p>\n<h3><span id=\"%E5%B8%B8%E8%A7%81%E7%9A%84swing%E7%BB%84%E4%BB%B6\">常见的Swing组件</span></h3><table>\n<thead>\n<tr>\n<th>组件</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><a href=\"#jframe\">JFrame</a></td>\n<td>窗口</td>\n</tr>\n<tr>\n<td><a href=\"#jpanel\">JPanel</a></td>\n<td>面板，用于组织其他组件的容器</td>\n</tr>\n<tr>\n<td><a href=\"#jbutton\">JButton</a></td>\n<td>按钮</td>\n</tr>\n<tr>\n<td>JTextField</td>\n<td>文本输入框</td>\n</tr>\n<tr>\n<td>JTable</td>\n<td>表格</td>\n</tr>\n</tbody></table>\n<h3><span id=\"jframe\">JFrame</span></h3><table>\n<thead>\n<tr>\n<th>API</th>\n<th>作用</th>\n<th>value</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>void setSize(int width, int height)</code></td>\n<td>设置窗口大小</td>\n<td></td>\n</tr>\n<tr>\n<td><code>void setLocationRelativeTo(Component c)</code></td>\n<td>设置窗口位置</td>\n<td></td>\n</tr>\n<tr>\n<td><code>void setDefaultCloseOperation(int operation)</code></td>\n<td>设置关闭方式</td>\n<td><code>JFrame.EXIT_ON_CLOSE</code> 关闭窗口时退出程序</td>\n</tr>\n<tr>\n<td><code>void setVisible(boolean b)</code></td>\n<td>设置窗口是否可见</td>\n<td></td>\n</tr>\n<tr>\n<td><code>void add(Component c)</code></td>\n<td>添加组件</td>\n<td></td>\n</tr>\n</tbody></table>\n<h3><span id=\"jpanel\">JPanel</span></h3><p><a href=\"#gui%E7%BC%96%E7%A8%8B\">back to GUI编程</a></p>\n<table>\n<thead>\n<tr>\n<th>API</th>\n<th>作用</th>\n<th>value</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>void add(Component c)</code></td>\n<td>添加组件</td>\n<td></td>\n</tr>\n</tbody></table>\n<h3><span id=\"jbutton\">JButton</span></h3><p><a href=\"#gui%E7%BC%96%E7%A8%8B\">back to GUI编程</a></p>\n<table>\n<thead>\n<tr>\n<th>API</th>\n<th>作用</th>\n<th>value</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>void setText(String text)</code></td>\n<td>设置按钮文本</td>\n<td></td>\n</tr>\n</tbody></table>\n<h3><span id=\"layout-manager\">Layout Manager</span></h3><p><a href=\"#gui%E7%BC%96%E7%A8%8B\">back to GUI编程</a></p>\n<table>\n<thead>\n<tr>\n<th>Layout Manager</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>BorderLayout</code></td>\n<td>边界布局，将容器分成5个区域，North、South、East、West、Center，每个区域只有一个组件</td>\n</tr>\n<tr>\n<td><code>FlowLayout</code></td>\n<td>流式布局，组件排满一行自动换行</td>\n</tr>\n<tr>\n<td><code>GridLayout</code></td>\n<td>网格布局，组件会自动填充</td>\n</tr>\n<tr>\n<td><code>GridBagLayout</code></td>\n<td>网格布局，组件会自动填充</td>\n</tr>\n</tbody></table>\n</body></html>","excerpt":"","more":"<h1 id=\"Java知识点\"><a href=\"#Java知识点\" class=\"headerlink\" title=\"Java知识点\"></a>Java知识点</h1><hr>\n<h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h2><blockquote>\n<p><a href=\"#%E9%9D%99%E6%80%81%E5%8F%98%E9%87%8F%E9%9D%99%E6%80%81%E6%96%B9%E6%B3%95\">静态变量、静态方法</a><br><a href=\"#%E7%BB%A7%E6%89%BF\">继承</a><br><a href=\"#%E5%A4%9A%E6%80%81\">多态</a><br><a href=\"#final-%E5%85%B3%E9%94%AE%E5%AD%97\">final关键字</a><br><a href=\"#%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F\">设计模式</a><br><a href=\"#%E6%9E%9A%E4%B8%BE%E7%B1%BB\">枚举类</a><br><a href=\"#%E6%8A%BD%E8%B1%A1%E7%B1%BB\">抽象类</a><br><a href=\"#%E6%8E%A5%E5%8F%A3\">接口</a><br><a href=\"#%E4%BB%A3%E7%A0%81%E5%9D%97\">代码块</a><br><a href=\"#%E5%86%85%E9%83%A8%E7%B1%BB\">内部类</a><br><a href=\"#%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B\">函数式编程</a><br><a href=\"#%E5%B8%B8%E7%94%A8api\">常用API</a><br><a href=\"#gui%E7%BC%96%E7%A8%8B\">GUI编程</a></p>\n</blockquote>\n<hr>\n<h2 id=\"静态变量、静态方法\"><a href=\"#静态变量、静态方法\" class=\"headerlink\" title=\"静态变量、静态方法\"></a>静态变量、静态方法</h2><p><a href=\"#%E7%9B%AE%E5%BD%95\">返回目录</a></p>\n<h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><ol>\n<li><strong>静态变量（类变量）</strong>：属于类，只加载一份，可以被类和类的全部对象访问</li>\n<li><strong>实例变量（对象变量）</strong>：属于对象，每个对象有自己一份</li>\n<li><strong>静态方法（类方法）</strong>：属于类，只能访问静态变量，不能访问实例变量</li>\n<li><strong>实例方法（对象方法）</strong>：属于对象</li>\n</ol>\n<h3 id=\"应用\"><a href=\"#应用\" class=\"headerlink\" title=\"应用\"></a>应用</h3><ol>\n<li><strong>静态变量</strong>的应用实例: 记录对象的创建数量</li>\n<li><strong>静态方法</strong>应用实例：对于只需要完成某个功能，而不需要直接访问对象的数据的方法，可以使用静态方法<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Student</span> &#123;<br>    <span class=\"hljs-comment\">// 静态变量（类变量）：属于类，只加载一份，可以被类和类的全部对象访问</span><br>    <span class=\"hljs-keyword\">static</span> String schoolName;<br>    <span class=\"hljs-comment\">// 实例变量（对象变量）：属于对象，每个对象有自己一份</span><br>    String name;<br>    <span class=\"hljs-comment\">// 静态变量的应用实例: 记录对象的创建数量</span><br>    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">Integer</span> <span class=\"hljs-variable\">count</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span> ;<br><br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">Student</span><span class=\"hljs-params\">(String name)</span>&#123;<br>        <span class=\"hljs-built_in\">this</span>.name = name;<br>        <span class=\"hljs-comment\">// 同一个类中，访问静态变量，类名可以不写</span><br>        count++;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">Student</span><span class=\"hljs-params\">()</span>&#123;<br>        count++;<br>    &#125;<br><br>    <span class=\"hljs-comment\">// 静态方法（类方法）：属于类，只能访问静态变量，不能访问实例变量</span><br>    <span class=\"hljs-comment\">// 静态方法应用实例：对于只需要完成某个功能，而不需要直接访问对象的数据的方法，可以使用静态方法</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">printHelloWorld</span><span class=\"hljs-params\">()</span>&#123;<br>        System.out.println(<span class=\"hljs-string\">&quot;Hello World&quot;</span>);<br>    &#125;<br><br>    <span class=\"hljs-comment\">// 实例方法（对象方法）：属于对象</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">printName</span><span class=\"hljs-params\">()</span>&#123;<br>        System.out.println(name);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h3><ol>\n<li><strong>静态方法</strong>可以直接访问<strong>静态变量</strong>，不能直接访问<strong>实例变量</strong></li>\n<li><strong>实例方法</strong>既可以直接访问<strong>静态变量</strong>，也可以直接访问<strong>实例变量</strong></li>\n<li><strong>静态方法</strong>不能使用<code>this</code>关键字（不属于对象，自然不可以用<code>this</code>）</li>\n</ol>\n<h3 id=\"访问方式\"><a href=\"#访问方式\" class=\"headerlink\" title=\"访问方式\"></a>访问方式</h3><ol>\n<li><strong>静态变量</strong>访问方式：<strong>类名</strong>.静态成员变量名<font color=red>（推荐方式）</font></li>\n<li><strong>静态变量</strong>访问方式：<strong>对象名</strong>.静态成员变量名（不推荐）</li>\n<li><strong>静态方法</strong>访问方式：<strong>类名</strong>.静态方法名</li>\n</ol>\n<h2 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h2><p><a href=\"#%E7%9B%AE%E5%BD%95\">返回目录</a></p>\n<h3 id=\"子类构造器的特点\"><a href=\"#子类构造器的特点\" class=\"headerlink\" title=\"子类构造器的特点\"></a>子类构造器的特点</h3><ol>\n<li>子类的全部构造器，都会先调用父类的构造器，再调用自己的构造器</li>\n<li>默认情况下，子类构造器的第一行都是<code>super();</code>(<strong>写不写都有</strong>)调用父类构造器，可自行指定有参还是无参</li>\n</ol>\n<h3 id=\"兄弟构造器\"><a href=\"#兄弟构造器\" class=\"headerlink\" title=\"兄弟构造器\"></a>兄弟构造器</h3><ol>\n<li>构造器中可以使用<code>this(参数);</code>调用兄弟构造器，可用于为某个参数赋予默认值</li>\n<li><code>super();</code>和<code>this();</code>必须写在构造器的<strong>第一行</strong>，并且<strong>不能同时使用</strong></li>\n</ol>\n<h2 id=\"多态\"><a href=\"#多态\" class=\"headerlink\" title=\"多态\"></a>多态</h2><p><a href=\"#%E7%9B%AE%E5%BD%95\">返回目录</a></p>\n<h3 id=\"认识多态\"><a href=\"#认识多态\" class=\"headerlink\" title=\"认识多态\"></a>认识多态</h3><ol>\n<li>多态是在<strong>继承&#x2F;实现</strong>情况下的一种现象，表现为<strong>对象多态、行为多态</strong><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">main</span> &#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>        <span class=\"hljs-comment\">// 对象多态</span><br>        <span class=\"hljs-type\">Animal</span> <span class=\"hljs-variable\">wolf</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Wolf</span>();<br>        <span class=\"hljs-type\">Animal</span> <span class=\"hljs-variable\">dog</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Dog</span>();<br><br>        <span class=\"hljs-comment\">// 行为多态</span><br>        wolf.run();<br>        System.out.println(wolf.name);<br>        dog.run();<br>        System.out.println(dog.name);<br><br>        <span class=\"hljs-comment\">// 多态的好处2：定义方法时，使用父类的形参，可以接收一切子类对象，拓展性强</span><br>        goRun(wolf);<br>        goRun(dog);<br><br>        <span class=\"hljs-comment\">// 强制类型转换，解决多态下无法调用子类独有方法的问题</span><br>        <span class=\"hljs-comment\">// 注意：对象的真实类型与强制转换的类型不同，会导致ClassCastException异常</span><br>        <span class=\"hljs-type\">Wolf</span> <span class=\"hljs-variable\">newWolf</span> <span class=\"hljs-operator\">=</span> (Wolf)wolf;<br>        <span class=\"hljs-type\">Dog</span> <span class=\"hljs-variable\">newDog</span> <span class=\"hljs-operator\">=</span> (Dog)dog;<br>        newWolf.howl();<br>        newDog.bark();<br><br>        <span class=\"hljs-comment\">// instanceof 判断对象是否是某个类的实例</span><br>        <span class=\"hljs-keyword\">if</span>(wolf <span class=\"hljs-keyword\">instanceof</span> Dog)&#123;<br>            <span class=\"hljs-type\">Dog</span> <span class=\"hljs-variable\">newNewDog</span> <span class=\"hljs-operator\">=</span> (Dog)wolf;<br>        &#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(wolf <span class=\"hljs-keyword\">instanceof</span> Wolf)&#123;<br>            <span class=\"hljs-type\">Wolf</span> <span class=\"hljs-variable\">newNewWolf</span> <span class=\"hljs-operator\">=</span> (Wolf)wolf;<br>        &#125;<br><br>    &#125;<br><br>    <span class=\"hljs-comment\">// 多态的好处2：定义方法时，使用父类的形参，可以接收一切子类对象，拓展性强</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">goRun</span><span class=\"hljs-params\">(Animal animal)</span>&#123;<br>        animal.run();<br>    &#125;<br>&#125;<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Animal</span> &#123;<br>    <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">name</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;animal&quot;</span>;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">run</span><span class=\"hljs-params\">()</span>&#123;<br>        System.out.println(<span class=\"hljs-string\">&quot;running&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Dog</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">Animal</span>&#123;<br>    <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">name</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;Dog&quot;</span>;<br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">run</span><span class=\"hljs-params\">()</span><br>    &#123;<br>        System.out.println(<span class=\"hljs-string\">&quot;Dog is running&quot;</span>);<br>    &#125;<br><br>    <span class=\"hljs-comment\">// 多态无法调用子类独有的方法</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">bark</span><span class=\"hljs-params\">()</span><br>    &#123;<br>        System.out.println(<span class=\"hljs-string\">&quot;Dog is barking&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Wolf</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">Animal</span>&#123;<br>    <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">name</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;Wolf&quot;</span>;<br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">run</span><span class=\"hljs-params\">()</span><br>    &#123;<br>        System.out.println(<span class=\"hljs-string\">&quot;Wolf is running&quot;</span>);<br>    &#125;<br><br>    <span class=\"hljs-comment\">// 多态无法调用子类独有的方法</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">howl</span><span class=\"hljs-params\">()</span><br>    &#123;<br>        System.out.println(<span class=\"hljs-string\">&quot;Wolf is howling&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li>\n<li><code>run()</code>方法：编译看左<code>Animal</code>，运行看右<code>Dog/Wolf</code></li>\n<li><code>name</code>属性：编译看左<code>Animal</code>，运行看也左<code>Animal</code></li>\n</ol>\n<h3 id=\"多态的特性\"><a href=\"#多态的特性\" class=\"headerlink\" title=\"多态的特性\"></a>多态的特性</h3><ol>\n<li>多态模式下，右边的对象是解耦合的，便于拓展和维护</li>\n<li>定义方法时，使用父类的形参，可以接收一切子类对象，拓展性强</li>\n<li>多态模式下，无法调用子类独有的方法</li>\n<li>多态模式下，强制类型转换成子类对象，此时可以调用子类独有的方法</li>\n<li>对象的真实类型与强制转换的类型不同，会导致<code>ClassCastException</code>异常</li>\n<li><code>instanceof</code> 判断对象是否是某个类的实例，强制类型转换之前可以检查是否是某个类的实例</li>\n</ol>\n<h2 id=\"final-关键字\"><a href=\"#final-关键字\" class=\"headerlink\" title=\"final 关键字\"></a>final 关键字</h2><p><a href=\"#%E7%9B%AE%E5%BD%95\">返回目录</a></p>\n<h3 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h3><ol>\n<li><code>final</code> 关键字修饰类：表示该类不能被继承，称为<strong>最终类</strong></li>\n<li><code>final</code> 关键字修饰方法：表示该方法不能被重写，称为<strong>最终方法</strong></li>\n<li><code>final</code> 关键字修饰变量：表示该变量有且仅能赋值一次</li>\n</ol>\n<h3 id=\"使用场景\"><a href=\"#使用场景\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h3><ol>\n<li>使用<code>final</code>修饰<strong>静态变量</strong>，可以声明一个<strong>常量</strong>，通常作为系统配置信息，不再修改(常量通常全大写，多个单词用下划线连接，如<code>MAX_SIZE</code>)</li>\n<li>使用<code>final</code>修饰<strong>基本变量</strong>，变量储存的<strong>数据</strong>不能改变</li>\n<li>使用<code>final</code>修饰<strong>引用变量</strong>(类对象、数组对象)，变量存储的<strong>地址</strong>不能改变，但对象内部数据可以改变</li>\n</ol>\n<h2 id=\"设计模式\"><a href=\"#设计模式\" class=\"headerlink\" title=\"设计模式\"></a>设计模式</h2><p><a href=\"#%E7%9B%AE%E5%BD%95\">返回目录</a></p>\n<h3 id=\"单例设计模式\"><a href=\"#单例设计模式\" class=\"headerlink\" title=\"单例设计模式\"></a>单例设计模式</h3><h4 id=\"作用\"><a href=\"#作用\" class=\"headerlink\" title=\"作用\"></a>作用</h4><p>确保某个类只创建一个对象</p>\n<h4 id=\"实现方式\"><a href=\"#实现方式\" class=\"headerlink\" title=\"实现方式\"></a>实现方式</h4><h5 id=\"饿汉式单例–用对象之前已创建完毕\"><a href=\"#饿汉式单例–用对象之前已创建完毕\" class=\"headerlink\" title=\"饿汉式单例–用对象之前已创建完毕\"></a>饿汉式单例–用对象之前已创建完毕</h5><ol>\n<li>将类的构造器私有</li>\n<li>定义一个类变量记住一个对象</li>\n<li>定义一个类方法获取对象</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// 饿汉式单例</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">A</span> &#123;<br>    <span class=\"hljs-comment\">// 1. 私有化构造器：确保单例类对外不能创建对象</span><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-title function_\">A</span><span class=\"hljs-params\">()</span>&#123;<br>    &#125;<br><br>    <span class=\"hljs-comment\">// 2. 创建静态成员变量记住唯一的一个实例</span><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">A</span> <span class=\"hljs-variable\">a</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">A</span>();<br><br>    <span class=\"hljs-comment\">// 3. 创建静态方法，返回唯一实例</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> A <span class=\"hljs-title function_\">getInstance</span><span class=\"hljs-params\">()</span>&#123;<br>        <span class=\"hljs-keyword\">return</span> a;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h5 id=\"懒汉式单例–用对象时才创建对象\"><a href=\"#懒汉式单例–用对象时才创建对象\" class=\"headerlink\" title=\"懒汉式单例–用对象时才创建对象\"></a>懒汉式单例–用对象时才创建对象</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// 懒汉式单例</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">B</span> &#123;<br>    <span class=\"hljs-comment\">// 私有化构造器</span><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-title function_\">B</span><span class=\"hljs-params\">()</span>&#123;&#125;<br><br>    <span class=\"hljs-comment\">// 静态变量记住唯一实例</span><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> B b;<br><br>    <span class=\"hljs-comment\">// 静态方法获取唯一实例</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> B <span class=\"hljs-title function_\">getInstance</span><span class=\"hljs-params\">()</span>&#123;<br>        <span class=\"hljs-keyword\">if</span>(b == <span class=\"hljs-literal\">null</span>)&#123;<br>            b = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">B</span>();<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> b;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"模板方法设计模式\"><a href=\"#模板方法设计模式\" class=\"headerlink\" title=\"模板方法设计模式\"></a>模板方法设计模式</h3><h4 id=\"基本概念-1\"><a href=\"#基本概念-1\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h4><p>提供一个方法作为完成某类功能的模板，模板方法封装了每个实现步骤，但允许子类提供特定步骤的实现</p>\n<h4 id=\"实现方式-1\"><a href=\"#实现方式-1\" class=\"headerlink\" title=\"实现方式\"></a>实现方式</h4><ol>\n<li>定义模板方法，把共同实现步骤放进去</li>\n<li>定义抽象方法，交给具体的子类完成</li>\n<li>建议使用<code>final</code>修饰模板方法，防止被重写</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">abstract</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">People</span> &#123;<br>    <span class=\"hljs-comment\">// 模板方法设计模式</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">write</span><span class=\"hljs-params\">()</span>&#123;<br>        System.out.println(<span class=\"hljs-string\">&quot;重复部分代码&quot;</span>);<br>        <span class=\"hljs-comment\">// 模板方法知道子类一定要重写的部分</span><br>        <span class=\"hljs-comment\">// 使用抽象方法来实现重写部分</span><br>        writeMain();<br><br>        System.out.println(<span class=\"hljs-string\">&quot;重复部分代码&quot;</span>);<br>    &#125;<br><br>    <span class=\"hljs-comment\">// 定义一个抽象方法，子类必须实现</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">abstract</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">writeMain</span><span class=\"hljs-params\">()</span>;<br>&#125;<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Student</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">People</span>&#123;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">writeMain</span><span class=\"hljs-params\">()</span> &#123;<br>        System.out.println(<span class=\"hljs-string\">&quot;学生写代码&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Teacher</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">People</span>&#123;<br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">writeMain</span><span class=\"hljs-params\">()</span> &#123;<br>        System.out.println(<span class=\"hljs-string\">&quot;老师写代码&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"枚举类\"><a href=\"#枚举类\" class=\"headerlink\" title=\"枚举类\"></a>枚举类</h2><p><a href=\"#%E7%9B%AE%E5%BD%95\">返回目录</a></p>\n<h3 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h3><ol>\n<li>枚举类都是最终类，不能被继承，都继承自<code>java.lang.Enum</code></li>\n<li>枚举类第一行只能罗列一些名称，这些名称是常量，每个常量会记住枚举类的一个对象</li>\n<li>枚举类的构造器都是私有的，不能对外创建对象<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// 反编译后的枚举类结构</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">com</span>.kei.enumDemo.A <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">java</span>.lang.Enum&lt;com.kei.enumDemo.A&gt; &#123;<br>  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> com.kei.enumDemo.A X;<br>  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> com.kei.enumDemo.A Y;<br>  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> com.kei.enumDemo.A Z;<br>  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> com.kei.enumDemo.A[] values();<br>  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> com.kei.enumDemo.A <span class=\"hljs-title function_\">valueOf</span><span class=\"hljs-params\">(java.lang.String)</span>;<br>  <span class=\"hljs-keyword\">static</span> &#123;&#125;;<br>&#125;<br></code></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"Api\"><a href=\"#Api\" class=\"headerlink\" title=\"Api\"></a>Api</h3><ol>\n<li><code>name()</code>：返回枚举常量的名称</li>\n<li><code>ordinal()</code>：返回枚举常量的索引，索引从0开始</li>\n</ol>\n<h3 id=\"使用场景-1\"><a href=\"#使用场景-1\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h3><ol>\n<li>枚举类一般用于信息分类和标志</li>\n<li>枚举类作为形参可以约束传入参数</li>\n</ol>\n<h2 id=\"抽象类\"><a href=\"#抽象类\" class=\"headerlink\" title=\"抽象类\"></a>抽象类</h2><p><a href=\"#%E7%9B%AE%E5%BD%95\">返回目录</a></p>\n<h3 id=\"抽象类和抽象方法\"><a href=\"#抽象类和抽象方法\" class=\"headerlink\" title=\"抽象类和抽象方法\"></a>抽象类和抽象方法</h3><ol>\n<li>抽象类：抽象类不能实例化对象，只能被继承</li>\n<li>抽象方法：抽象方法没有方法体，方法体由子类实现</li>\n</ol>\n<h2 id=\"接口\"><a href=\"#接口\" class=\"headerlink\" title=\"接口\"></a>接口</h2><p><a href=\"#%E7%9B%AE%E5%BD%95\">返回目录</a></p>\n<h3 id=\"基本概念-2\"><a href=\"#基本概念-2\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h3><p><code>interface</code> 关键字定义接口</p>\n<ol>\n<li>定义常量，接口中的常量public static final 可以不写，默认是public static final</li>\n<li>定义抽象方法，接口中的抽象方法public abstract 可以不写，默认是public abstract</li>\n<li>接口不能实例化对象</li>\n<li>接口可以被实现类通过<code>implements</code>关键字<strong>实现</strong>，一个类只能<strong>继承</strong>一个父类，但可以<strong>实现</strong>多个接口</li>\n<li>实现类必须实现所有接口中的抽象方法，否则必须声明抽象类</li>\n</ol>\n<h3 id=\"接口的好处\"><a href=\"#接口的好处\" class=\"headerlink\" title=\"接口的好处\"></a>接口的好处</h3><ol>\n<li>解决了单继承的不足，使类的角色更多</li>\n<li>面相接口编程，进一步解耦合</li>\n</ol>\n<h3 id=\"JDK8-新特性\"><a href=\"#JDK8-新特性\" class=\"headerlink\" title=\"JDK8 新特性\"></a>JDK8 新特性</h3><ol>\n<li>默认方法：使用<code>default</code>关键字定义，默认被<code>public</code>修饰，只能由接口实现类对象调用，实际上是对象（实例）方法</li>\n<li>私有方法：使用<code>private</code>关键字定义，只能由接口内部其他实例调用，不能被继承</li>\n<li>静态方法：使用<code>static</code>关键字定义，默认被<code>public</code>修饰，只能由接口名称调用，实际上是类方法</li>\n</ol>\n<h3 id=\"注意事项-1\"><a href=\"#注意事项-1\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h3><ol>\n<li>多继承：<strong>接口</strong>可以继承多个<strong>接口</strong></li>\n<li>多实现：<strong>接口</strong>可以被多个<strong>类</strong>实现</li>\n<li>一个接口继承多个接口时，若存在签名冲突，则不支持多继承和多实现</li>\n<li>一个接口继承多个接口时，若存在同名默认方法，重写该方法可以不冲突</li>\n<li>一个类继承了父类，同时实现了接口，若有同名方法，则父类方法优先</li>\n<li>一个类继承了父类，同时实现了接口，若有同名方法，可通过<code>接口名.super.接口方法()</code>调用接口方法</li>\n</ol>\n<h2 id=\"代码块\"><a href=\"#代码块\" class=\"headerlink\" title=\"代码块\"></a>代码块</h2><p><a href=\"#%E7%9B%AE%E5%BD%95\">返回目录</a></p>\n<h3 id=\"静态代码块\"><a href=\"#静态代码块\" class=\"headerlink\" title=\"静态代码块\"></a>静态代码块</h3><p><strong>格式</strong>：<code>static&#123; &#125;</code><br><strong>特点</strong>：<strong>类</strong>加载时自动执行，只执行一次<br><strong>作用</strong>：完成<strong>类</strong>的初始化，静态变量的初始化赋值</p>\n<h3 id=\"实例代码块\"><a href=\"#实例代码块\" class=\"headerlink\" title=\"实例代码块\"></a>实例代码块</h3><p><strong>格式</strong>：<code>&#123; &#125;</code><br><strong>特点</strong>：<strong>对象</strong>创建时自动执行，每次创建对象都会执行<br><strong>作用</strong>：完成<strong>对象</strong>的初始化，实例变量的初始化赋值</p>\n<h2 id=\"内部类\"><a href=\"#内部类\" class=\"headerlink\" title=\"内部类\"></a>内部类</h2><p><a href=\"#%E7%9B%AE%E5%BD%95\">返回目录</a></p>\n<h3 id=\"基本概念-3\"><a href=\"#基本概念-3\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h3><p>当一个类定义在另一个类的内部，这个类就是内部类<br>当一个类的内部，包含一个完整的事物，且这个事物没必要单独设计，这个类可以被设计为内部类</p>\n<h3 id=\"成员内部类\"><a href=\"#成员内部类\" class=\"headerlink\" title=\"成员内部类\"></a>成员内部类</h3><ol>\n<li>定义在外部类内，无<code>static</code>修饰，属于<strong>外部类对象持有</strong>的</li>\n<li>创建内部类对象的语法：<code>外部类名.内部类名 对象名 = new 外部类对象().new 内部类名()</code></li>\n<li>成员内部类可以直接访问外部类<strong>静态成员</strong>，也可以访问外部类<strong>实例成员</strong>（成员内部类寄生于外部类对象）</li>\n<li>成员内部类可以通过<code>外部类名.this</code>访问外部类对象</li>\n</ol>\n<h3 id=\"静态内部类\"><a href=\"#静态内部类\" class=\"headerlink\" title=\"静态内部类\"></a>静态内部类</h3><ol>\n<li>定义在外部类内，有<code>static</code>修饰，属于<strong>外部类持有</strong>的</li>\n<li>创建内部类对象的语法：<code>外部类名.内部类名 对象名 = new 外部类名.内部类名()</code></li>\n<li>静态内部类可以直接访问外部类<strong>静态成员</strong>，不能访问外部类<strong>实例成员</strong></li>\n</ol>\n<h3 id=\"匿名内部类\"><a href=\"#匿名内部类\" class=\"headerlink\" title=\"匿名内部类\"></a>匿名内部类</h3><ol>\n<li>匿名内部类是一种特殊的局部内部类，不需要声明类名，默认有一个隐藏的名称</li>\n<li>匿名内部类本质是一个子类，并且会立即创建一个子类对象，编译后会生成一个 <code>类名$编号.class</code> 文件<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">new</span> 类或接口(参数)&#123;<br>    类体（一般是方法重写）<br>&#125;<br></code></pre></td></tr></table></figure></li>\n<li>用于更方便创建子类</li>\n</ol>\n<h2 id=\"函数式编程\"><a href=\"#函数式编程\" class=\"headerlink\" title=\"函数式编程\"></a>函数式编程</h2><p><a href=\"#%E7%9B%AE%E5%BD%95\">返回目录</a></p>\n<h3 id=\"Lambda-表达式\"><a href=\"#Lambda-表达式\" class=\"headerlink\" title=\"Lambda 表达式\"></a>Lambda 表达式</h3><ol>\n<li>语法：<code>(参数列表) -&gt; &#123;方法体&#125;</code></li>\n<li>函数式接口：只有一个抽象方法的接口</li>\n<li>可以简化函数式接口的匿名内部类</li>\n</ol>\n<h3 id=\"静态方法引用\"><a href=\"#静态方法引用\" class=\"headerlink\" title=\"静态方法引用\"></a>静态方法引用</h3><ol>\n<li>格式：<code>类名::静态方法名</code></li>\n<li>如果一个Lambda表达式里只调用一个静态方法，并且<code>-&gt;</code>前后的参数的形式一致，则可以使用静态方法引用</li>\n</ol>\n<h3 id=\"实例方法引用\"><a href=\"#实例方法引用\" class=\"headerlink\" title=\"实例方法引用\"></a>实例方法引用</h3><ol>\n<li>语法：<code>对象::实例方法名</code></li>\n<li>如果一个Lambda表达式里只调用一个实例方法，并且<code>-&gt;</code>前后的参数的形式一致，则可以使用实例方法引用</li>\n</ol>\n<h3 id=\"特定类型方法引用\"><a href=\"#特定类型方法引用\" class=\"headerlink\" title=\"特定类型方法引用\"></a>特定类型方法引用</h3><ol>\n<li>语法：<code>特定类名::实例方法名</code></li>\n<li>如果某个Lambda表达式里只是调用一个特定类型的实例方法，并且前面参数列表的第一个参数作为方法的主调，后面所有参数都是作为实例方法的入参，则可以使用特定类型方法引用</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Main2</span> &#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>        <span class=\"hljs-comment\">// 需求：一个英文人名数组，按字母升序排序</span><br>        String[] names = &#123;<span class=\"hljs-string\">&quot;Tom&quot;</span>, <span class=\"hljs-string\">&quot;Jerry&quot;</span>, <span class=\"hljs-string\">&quot;Mike&quot;</span>, <span class=\"hljs-string\">&quot;Mary&quot;</span>, <span class=\"hljs-string\">&quot;Smith&quot;</span>, <span class=\"hljs-string\">&quot;Kate&quot;</span>, <span class=\"hljs-string\">&quot;tom&quot;</span>, <span class=\"hljs-string\">&quot;jam&quot;</span>, <span class=\"hljs-string\">&quot;milk&quot;</span>&#125;;<br><br>        <span class=\"hljs-comment\">// 排序</span><br>        Arrays.sort(names);<br>        <span class=\"hljs-comment\">// 忽略首字母大小写</span><br>        Arrays.sort(names, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Comparator</span>&lt;String&gt;() &#123;<br>            <span class=\"hljs-meta\">@Override</span><br>            <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">compare</span><span class=\"hljs-params\">(String o1, String o2)</span> &#123;<br>                <span class=\"hljs-comment\">// compareToIgnoreCase(): 忽略大小写</span><br>                <span class=\"hljs-keyword\">return</span> o1.compareToIgnoreCase(o2);<br>            &#125;<br>        &#125;);<br><br>        <span class=\"hljs-comment\">// Lambda 表达式</span><br>        Arrays.sort(names, (o1, o2) -&gt; o1.compareToIgnoreCase(o2));<br><br>        <span class=\"hljs-comment\">// 特定的方法引用：类名::方法名</span><br>        Arrays.sort(names, String::compareToIgnoreCase);<br><br>        System.out.println(Arrays.toString(names));<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"构造器引用\"><a href=\"#构造器引用\" class=\"headerlink\" title=\"构造器引用\"></a>构造器引用</h3><ol>\n<li>语法：<code>类名::new</code></li>\n<li>如果某个Lambda表达式里只是在创建对象，并且<code>-&gt;</code>前后的参数形式一致，则可以使用构造器引用</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Main3</span> &#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>        <span class=\"hljs-type\">CarFactory</span> <span class=\"hljs-variable\">factory</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">CarFactory</span>() &#123;<br>            <span class=\"hljs-meta\">@Override</span><br>            <span class=\"hljs-keyword\">public</span> Car <span class=\"hljs-title function_\">create</span><span class=\"hljs-params\">(String name)</span> &#123;<br>                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Car</span>(name);<br>            &#125;<br>        &#125;;<br>        <span class=\"hljs-comment\">// Lambda 表达式</span><br>        <span class=\"hljs-type\">CarFactory</span> <span class=\"hljs-variable\">factory2</span> <span class=\"hljs-operator\">=</span> (name) -&gt; <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Car</span>(name);<br><br>        <span class=\"hljs-comment\">// 构造器引用</span><br>        <span class=\"hljs-type\">CarFactory</span> <span class=\"hljs-variable\">factory3</span> <span class=\"hljs-operator\">=</span> Car::<span class=\"hljs-keyword\">new</span>;<br>    &#125;<br><br>&#125;<br><br><span class=\"hljs-meta\">@FunctionalInterface</span><br><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">CarFactory</span> &#123;<br>    Car <span class=\"hljs-title function_\">create</span><span class=\"hljs-params\">(String name)</span>;<br>&#125;<br><br><span class=\"hljs-meta\">@Data</span><br><span class=\"hljs-meta\">@NoArgsConstructor</span><br><span class=\"hljs-meta\">@AllArgsConstructor</span><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Car</span>&#123;<br>    <span class=\"hljs-keyword\">private</span> String name;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"常用API\"><a href=\"#常用API\" class=\"headerlink\" title=\"常用API\"></a>常用API</h2><p><a href=\"#%E7%9B%AE%E5%BD%95\">返回目录</a></p>\n<blockquote>\n<p><a href=\"#string\">String</a><br><a href=\"#arraylist\">ArrayList</a></p>\n</blockquote>\n<h3 id=\"String\"><a href=\"#String\" class=\"headerlink\" title=\"String\"></a>String</h3><h4 id=\"创建字符串\"><a href=\"#创建字符串\" class=\"headerlink\" title=\"创建字符串\"></a>创建字符串</h4><ol>\n<li><strong>方式一</strong>：<code>String str = &quot;hello world&quot;;</code></li>\n<li>方式二：调用构造器创建字符串对象<ol>\n<li><code>String str = new String();</code> 创建一个空字符串对象</li>\n<li><code>String str = new String(&quot;hello world&quot;);</code> 创建一个字符串对象</li>\n<li><code>String str = new String(char[] value);</code> 根据字符数组创建一个字符串对象</li>\n<li><code>String str = new String(byte[] value);</code> 根据字节数组创建一个字符串对象</li>\n</ol>\n</li>\n<li>方式一存放在<strong>常量池</strong>中，且相同的字符串对象只创建一个</li>\n<li>方式二存放在<strong>堆</strong>中，且相同内容可以创建多个对象</li>\n</ol>\n<h4 id=\"处理字符串\"><a href=\"#处理字符串\" class=\"headerlink\" title=\"处理字符串\"></a>处理字符串</h4><table>\n<thead>\n<tr>\n<th>方法</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>int length()</code></td>\n<td>获取字符串长度</td>\n</tr>\n<tr>\n<td><code>boolean equals(Object obj)</code></td>\n<td>字符串内容比较（<code>==</code>比较的是字符串地址！）</td>\n</tr>\n<tr>\n<td><code>char charAt(int index)</code></td>\n<td>获取索引处的字符</td>\n</tr>\n<tr>\n<td><code>char[] toCharArray()</code></td>\n<td>转换成字符数组</td>\n</tr>\n<tr>\n<td><code>boolean equalsIgnoreCase(String str)</code></td>\n<td>判断字符串内容是否一致，忽略大小写</td>\n</tr>\n<tr>\n<td><code>String substring(int beginIndex, int endIndex)</code></td>\n<td>根据索引截取字符串</td>\n</tr>\n<tr>\n<td><code>String substring(int beginIndex)</code></td>\n<td>从索引处截取字符串</td>\n</tr>\n<tr>\n<td><code>String replace(CharSequence oldChar, CharSequence newChar)</code></td>\n<td>新值替换旧值</td>\n</tr>\n<tr>\n<td><code>boolean contains(CharSequence s)</code></td>\n<td>判断字符串中是否包含子串</td>\n</tr>\n<tr>\n<td><code>boolean startsWith(String prefix)</code></td>\n<td>判断字符串是否以指定字符开头</td>\n</tr>\n<tr>\n<td><code>String[] split(String regex)</code></td>\n<td>将字符串按某个字符分割为字符串数组</td>\n</tr>\n</tbody></table>\n<h3 id=\"ArrayList\"><a href=\"#ArrayList\" class=\"headerlink\" title=\"ArrayList\"></a>ArrayList</h3><table>\n<thead>\n<tr>\n<th>方法</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>ArrayList&lt;E&gt;()</code></td>\n<td>创建一个空的集合对象，E为集合中元素的数据类型，可不指定</td>\n</tr>\n<tr>\n<td><code>boolean add(E e)</code></td>\n<td>添加元素到集合末尾</td>\n</tr>\n<tr>\n<td><code>void add(int index, E element)</code></td>\n<td>在指定索引处添加元素</td>\n</tr>\n<tr>\n<td><code>E get(int index)</code></td>\n<td>获取指定索引处的元素</td>\n</tr>\n<tr>\n<td><code>int size()</code></td>\n<td>获取集合大小</td>\n</tr>\n<tr>\n<td><code>E remove(int index)</code></td>\n<td>删除指定索引处的元素，返回删除的元素</td>\n</tr>\n<tr>\n<td><code>boolean remove(Object o)</code></td>\n<td>删除指定元素，返回是否删除成功</td>\n</tr>\n<tr>\n<td><code>E set(int index, E element)</code></td>\n<td>修改指定索引处的元素，返回修改前的元素</td>\n</tr>\n</tbody></table>\n<h2 id=\"GUI编程\"><a href=\"#GUI编程\" class=\"headerlink\" title=\"*GUI编程\"></a>*GUI编程</h2><blockquote>\n<p>目前项目开发几乎不使用Java来开发GUI界面，仅了解</p>\n</blockquote>\n<p><a href=\"#%E7%9B%AE%E5%BD%95\">返回目录</a></p>\n<h3 id=\"常见的Swing组件\"><a href=\"#常见的Swing组件\" class=\"headerlink\" title=\"常见的Swing组件\"></a>常见的Swing组件</h3><table>\n<thead>\n<tr>\n<th>组件</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><a href=\"#jframe\">JFrame</a></td>\n<td>窗口</td>\n</tr>\n<tr>\n<td><a href=\"#jpanel\">JPanel</a></td>\n<td>面板，用于组织其他组件的容器</td>\n</tr>\n<tr>\n<td><a href=\"#jbutton\">JButton</a></td>\n<td>按钮</td>\n</tr>\n<tr>\n<td>JTextField</td>\n<td>文本输入框</td>\n</tr>\n<tr>\n<td>JTable</td>\n<td>表格</td>\n</tr>\n</tbody></table>\n<h3 id=\"JFrame\"><a href=\"#JFrame\" class=\"headerlink\" title=\"JFrame\"></a>JFrame</h3><table>\n<thead>\n<tr>\n<th>API</th>\n<th>作用</th>\n<th>value</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>void setSize(int width, int height)</code></td>\n<td>设置窗口大小</td>\n<td></td>\n</tr>\n<tr>\n<td><code>void setLocationRelativeTo(Component c)</code></td>\n<td>设置窗口位置</td>\n<td></td>\n</tr>\n<tr>\n<td><code>void setDefaultCloseOperation(int operation)</code></td>\n<td>设置关闭方式</td>\n<td><code>JFrame.EXIT_ON_CLOSE</code> 关闭窗口时退出程序</td>\n</tr>\n<tr>\n<td><code>void setVisible(boolean b)</code></td>\n<td>设置窗口是否可见</td>\n<td></td>\n</tr>\n<tr>\n<td><code>void add(Component c)</code></td>\n<td>添加组件</td>\n<td></td>\n</tr>\n</tbody></table>\n<h3 id=\"JPanel\"><a href=\"#JPanel\" class=\"headerlink\" title=\"JPanel\"></a>JPanel</h3><p><a href=\"#gui%E7%BC%96%E7%A8%8B\">back to GUI编程</a></p>\n<table>\n<thead>\n<tr>\n<th>API</th>\n<th>作用</th>\n<th>value</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>void add(Component c)</code></td>\n<td>添加组件</td>\n<td></td>\n</tr>\n</tbody></table>\n<h3 id=\"JButton\"><a href=\"#JButton\" class=\"headerlink\" title=\"JButton\"></a>JButton</h3><p><a href=\"#gui%E7%BC%96%E7%A8%8B\">back to GUI编程</a></p>\n<table>\n<thead>\n<tr>\n<th>API</th>\n<th>作用</th>\n<th>value</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>void setText(String text)</code></td>\n<td>设置按钮文本</td>\n<td></td>\n</tr>\n</tbody></table>\n<h3 id=\"Layout-Manager\"><a href=\"#Layout-Manager\" class=\"headerlink\" title=\"Layout Manager\"></a>Layout Manager</h3><p><a href=\"#gui%E7%BC%96%E7%A8%8B\">back to GUI编程</a></p>\n<table>\n<thead>\n<tr>\n<th>Layout Manager</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>BorderLayout</code></td>\n<td>边界布局，将容器分成5个区域，North、South、East、West、Center，每个区域只有一个组件</td>\n</tr>\n<tr>\n<td><code>FlowLayout</code></td>\n<td>流式布局，组件排满一行自动换行</td>\n</tr>\n<tr>\n<td><code>GridLayout</code></td>\n<td>网格布局，组件会自动填充</td>\n</tr>\n<tr>\n<td><code>GridBagLayout</code></td>\n<td>网格布局，组件会自动填充</td>\n</tr>\n</tbody></table>\n"},{"title":"Python笔记(持续更新中)","date":"2025-09-06T11:56:00.000Z","cover":"https://kei-blog.oss-cn-beijing.aliyuncs.com/asset/130997637_p0-cut.jpg","_content":"\n# Python 笔记\n\n## 目录\n>\n\n\n## 列表\n\n[返回目录](#目录)\n\n### 列表方法\n|方法|描述|返回值|\n|---|---|---|\n|`index(item)`|返回列表中指定元素的索引|`索引`,item不存在返回`error`|\n|`insert(index,item)`|在列表指定位置插入元素，此位置后的元素右移|`None`|\n|`append(item)`|在列表末尾添加元素|`None`|\n|`extend(list)`|在列表末尾添加列表元素|`None`|","source":"_posts/PythonTips.md","raw":"---\ntitle: \"Python笔记(持续更新中)\"\ndate: 2025/09/06 19:56:00\ntags: Python\ncover: https://kei-blog.oss-cn-beijing.aliyuncs.com/asset/130997637_p0-cut.jpg\n---\n\n# Python 笔记\n\n## 目录\n>\n\n\n## 列表\n\n[返回目录](#目录)\n\n### 列表方法\n|方法|描述|返回值|\n|---|---|---|\n|`index(item)`|返回列表中指定元素的索引|`索引`,item不存在返回`error`|\n|`insert(index,item)`|在列表指定位置插入元素，此位置后的元素右移|`None`|\n|`append(item)`|在列表末尾添加元素|`None`|\n|`extend(list)`|在列表末尾添加列表元素|`None`|","slug":"PythonTips","published":1,"updated":"2025-09-06T12:29:19.203Z","_id":"cmf88q04a0003c4tl7ruk57xr","comments":1,"layout":"post","photos":[],"content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><html><head></head><body><h1><span id=\"python-%E7%AC%94%E8%AE%B0\">Python 笔记</span></h1><h2><span id=\"%E7%9B%AE%E5%BD%95\">目录</span></h2><blockquote>\n</blockquote>\n<h2><span id=\"%E5%88%97%E8%A1%A8\">列表</span></h2><p><a href=\"#%E7%9B%AE%E5%BD%95\">返回目录</a></p>\n<h3><span id=\"%E5%88%97%E8%A1%A8%E6%96%B9%E6%B3%95\">列表方法</span></h3><table>\n<thead>\n<tr>\n<th>方法</th>\n<th>描述</th>\n<th>返回值</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>index(item)</code></td>\n<td>返回列表中指定元素的索引</td>\n<td><code>索引</code>,item不存在返回<code>error</code></td>\n</tr>\n<tr>\n<td><code>insert(index,item)</code></td>\n<td>在列表指定位置插入元素，此位置后的元素右移</td>\n<td><code>None</code></td>\n</tr>\n<tr>\n<td><code>append(item)</code></td>\n<td>在列表末尾添加元素</td>\n<td><code>None</code></td>\n</tr>\n<tr>\n<td><code>extend(list)</code></td>\n<td>在列表末尾添加列表元素</td>\n<td><code>None</code></td>\n</tr>\n</tbody></table>\n</body></html>","excerpt":"","more":"<h1 id=\"Python-笔记\"><a href=\"#Python-笔记\" class=\"headerlink\" title=\"Python 笔记\"></a>Python 笔记</h1><h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h2><blockquote>\n</blockquote>\n<h2 id=\"列表\"><a href=\"#列表\" class=\"headerlink\" title=\"列表\"></a>列表</h2><p><a href=\"#%E7%9B%AE%E5%BD%95\">返回目录</a></p>\n<h3 id=\"列表方法\"><a href=\"#列表方法\" class=\"headerlink\" title=\"列表方法\"></a>列表方法</h3><table>\n<thead>\n<tr>\n<th>方法</th>\n<th>描述</th>\n<th>返回值</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>index(item)</code></td>\n<td>返回列表中指定元素的索引</td>\n<td><code>索引</code>,item不存在返回<code>error</code></td>\n</tr>\n<tr>\n<td><code>insert(index,item)</code></td>\n<td>在列表指定位置插入元素，此位置后的元素右移</td>\n<td><code>None</code></td>\n</tr>\n<tr>\n<td><code>append(item)</code></td>\n<td>在列表末尾添加元素</td>\n<td><code>None</code></td>\n</tr>\n<tr>\n<td><code>extend(list)</code></td>\n<td>在列表末尾添加列表元素</td>\n<td><code>None</code></td>\n</tr>\n</tbody></table>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cmewhlst20000c0tl6a4l66i8","tag_id":"cmewhlst60001c0tlbeh77vu4","_id":"cmewhlst70002c0tl4tnbg9ic"},{"post_id":"cmf88q0440000c4tlhzl9avjf","tag_id":"cmf88q0470001c4tl9al0aoia","_id":"cmf88q0490002c4tl0gpf4zj9"},{"post_id":"cmf88q04a0003c4tl7ruk57xr","tag_id":"cmf88qxn100000stl9kmugljk","_id":"cmf88qxn300010stlhv83g16l"}],"Tag":[{"name":"txt","_id":"cmewhlst60001c0tlbeh77vu4"},{"name":"Java","_id":"cmf88q0470001c4tl9al0aoia"},{"name":"Python","_id":"cmf88qxn100000stl9kmugljk"}]}}